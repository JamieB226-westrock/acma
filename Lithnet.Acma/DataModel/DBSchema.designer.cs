#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lithnet.Acma.DataModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Lithnet.Acma")]
	public partial class DBSchemaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcmaSchemaObjectClass(AcmaSchemaObjectClass instance);
    partial void UpdateAcmaSchemaObjectClass(AcmaSchemaObjectClass instance);
    partial void DeleteAcmaSchemaObjectClass(AcmaSchemaObjectClass instance);
    partial void InsertAcmaSchemaAttribute(AcmaSchemaAttribute instance);
    partial void UpdateAcmaSchemaAttribute(AcmaSchemaAttribute instance);
    partial void InsertAcmaSchemaMapping(AcmaSchemaMapping instance);
    partial void UpdateAcmaSchemaMapping(AcmaSchemaMapping instance);
    partial void DeleteAcmaSchemaMapping(AcmaSchemaMapping instance);
    partial void InsertAcmaSchemaReferenceLink(AcmaSchemaReferenceLink instance);
    partial void UpdateAcmaSchemaReferenceLink(AcmaSchemaReferenceLink instance);
    partial void DeleteAcmaSchemaReferenceLink(AcmaSchemaReferenceLink instance);
    partial void InsertAcmaSchemaShadowObjectLink(AcmaSchemaShadowObjectLink instance);
    partial void UpdateAcmaSchemaShadowObjectLink(AcmaSchemaShadowObjectLink instance);
    partial void DeleteAcmaSchemaShadowObjectLink(AcmaSchemaShadowObjectLink instance);
    partial void InsertSafetyRule(SafetyRule instance);
    partial void UpdateSafetyRule(SafetyRule instance);
    partial void DeleteSafetyRule(SafetyRule instance);
    partial void InsertAcmaDBVersion(AcmaDBVersion instance);
    partial void UpdateAcmaDBVersion(AcmaDBVersion instance);
    partial void DeleteAcmaDBVersion(AcmaDBVersion instance);
    partial void InsertAcmaSetting(AcmaSetting instance);
    partial void UpdateAcmaSetting(AcmaSetting instance);
    partial void DeleteAcmaSetting(AcmaSetting instance);
    partial void InsertAcmaConstant(AcmaConstant instance);
    partial void UpdateAcmaConstant(AcmaConstant instance);
    partial void DeleteAcmaConstant(AcmaConstant instance);
    #endregion
		
		public DBSchemaDataContext() : 
				base(global::Lithnet.Acma.Properties.Settings.Default.AttributeConstructorMAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBSchemaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSchemaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSchemaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSchemaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcmaSchemaObjectClass> AcmaSchemaObjectClasses
		{
			get
			{
				return this.GetTable<AcmaSchemaObjectClass>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSchemaAttribute> AcmaSchemaAttributes
		{
			get
			{
				return this.GetTable<AcmaSchemaAttribute>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSchemaMapping> AcmaSchemaMappings
		{
			get
			{
				return this.GetTable<AcmaSchemaMapping>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSchemaReferenceLink> AcmaSchemaReferenceLinks
		{
			get
			{
				return this.GetTable<AcmaSchemaReferenceLink>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSchemaShadowObjectLink> AcmaSchemaShadowObjectLinks
		{
			get
			{
				return this.GetTable<AcmaSchemaShadowObjectLink>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSequence> AcmaSequences
		{
			get
			{
				return this.GetTable<AcmaSequence>();
			}
		}
		
		public System.Data.Linq.Table<SafetyRule> SafetyRules
		{
			get
			{
				return this.GetTable<SafetyRule>();
			}
		}
		
		public System.Data.Linq.Table<AcmaDBVersion> AcmaDBVersions
		{
			get
			{
				return this.GetTable<AcmaDBVersion>();
			}
		}
		
		public System.Data.Linq.Table<AcmaSetting> AcmaSettings
		{
			get
			{
				return this.GetTable<AcmaSetting>();
			}
		}
		
		public System.Data.Linq.Table<AcmaConstant> AcmaConstants
		{
			get
			{
				return this.GetTable<AcmaConstant>();
			}
		}
		
		private void DeleteAcmaSchemaAttribute(AcmaSchemaAttribute obj)
		{
			this.spSchemaDeleteAttribute(((System.Nullable<int>)(obj.ID)));
		}
		
		private void InsertAcmaSequence(AcmaSequence obj)
		{
			this.spSequenceCreate(obj.Name, ((System.Nullable<long>)(obj.StartValue)), ((System.Nullable<long>)(obj.Increment)), obj.MinValue, obj.MaxValue, ((System.Nullable<bool>)(obj.IsCycleEnabled)));
		}
		
		private void UpdateAcmaSequence(AcmaSequence obj)
		{
			AcmaSequence original = ((AcmaSequence)(AcmaSequences.GetOriginalEntityState(obj)));
			this.spSequenceModify(original.Name, obj.Name, ((System.Nullable<long>)(obj.StartValue)), ((System.Nullable<long>)(obj.Increment)), obj.MinValue, obj.MaxValue, ((System.Nullable<bool>)(obj.IsCycleEnabled)));
		}
		
		private void DeleteAcmaSequence(AcmaSequence obj)
		{
			AcmaSequence original = ((AcmaSequence)(AcmaSequences.GetOriginalEntityState(obj)));
			this.spSequenceDelete(original.Name);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaCreateIndex")]
		public int spSchemaCreateIndex([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string attributeName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaDeleteIndex")]
		public int spSchemaDeleteIndex([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string attributeName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaRenameAttribute")]
		public int spSchemaRenameAttribute([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string attributeName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string newAttributeName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeName, newAttributeName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaRenameObjectClass")]
		public int spSchemaRenameObjectClass([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string className, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string newClassName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), className, newClassName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaSetupNewAttribute")]
		public int spSchemaSetupNewAttribute([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSequenceCreate")]
		public int spSequenceCreate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string sequenceName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> startsWith, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> incrementBy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> cycle)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sequenceName, startsWith, incrementBy, minValue, maxValue, cycle);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSequenceDelete")]
		public int spSequenceDelete([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string sequenceName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sequenceName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSequenceGet")]
		public ISingleResult<spSequenceGetResult> spSequenceGet()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spSequenceGetResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSequenceModify")]
		public int spSequenceModify([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string sequenceName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string newSequenceName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> restartWith, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> incrementBy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> cycle)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sequenceName, newSequenceName, restartWith, incrementBy, minValue, maxValue, cycle);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSequenceGetNextValue")]
		public int spSequenceGetNextValue([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string sequenceName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sequenceName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spSchemaDeleteAttribute")]
		public int spSchemaDeleteAttribute([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SchemaObjectClasses")]
	public partial class AcmaSchemaObjectClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _ShadowFromObjectClassID;
		
		private bool _AllowResurrection;
		
		private EntitySet<AcmaSchemaObjectClass> _MASchemaObjects;
		
		private EntitySet<AcmaSchemaMapping> _MASchemaMappings;
		
		private EntitySet<AcmaSchemaMapping> _InheritanceSources;
		
		private EntitySet<AcmaSchemaReferenceLink> _ReferenceTargetLinks;
		
		private EntitySet<AcmaSchemaReferenceLink> _ReferenceSourceLinks;
		
		private EntitySet<AcmaSchemaShadowObjectLink> _ShadowLinks;
		
		private EntitySet<AcmaSchemaShadowObjectLink> _ShadowChildLinks;
		
		private EntityRef<AcmaSchemaObjectClass> _MA_SchemaObject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShadowFromObjectClassIDChanging(System.Nullable<int> value);
    partial void OnShadowFromObjectClassIDChanged();
    partial void OnAllowResurrectionChanging(bool value);
    partial void OnAllowResurrectionChanged();
    #endregion
		
		public AcmaSchemaObjectClass()
		{
			this._MASchemaObjects = new EntitySet<AcmaSchemaObjectClass>(new Action<AcmaSchemaObjectClass>(this.attach_MASchemaObjects), new Action<AcmaSchemaObjectClass>(this.detach_MASchemaObjects));
			this._MASchemaMappings = new EntitySet<AcmaSchemaMapping>(new Action<AcmaSchemaMapping>(this.attach_MASchemaMappings), new Action<AcmaSchemaMapping>(this.detach_MASchemaMappings));
			this._InheritanceSources = new EntitySet<AcmaSchemaMapping>(new Action<AcmaSchemaMapping>(this.attach_InheritanceSources), new Action<AcmaSchemaMapping>(this.detach_InheritanceSources));
			this._ReferenceTargetLinks = new EntitySet<AcmaSchemaReferenceLink>(new Action<AcmaSchemaReferenceLink>(this.attach_ReferenceTargetLinks), new Action<AcmaSchemaReferenceLink>(this.detach_ReferenceTargetLinks));
			this._ReferenceSourceLinks = new EntitySet<AcmaSchemaReferenceLink>(new Action<AcmaSchemaReferenceLink>(this.attach_ReferenceSourceLinks), new Action<AcmaSchemaReferenceLink>(this.detach_ReferenceSourceLinks));
			this._ShadowLinks = new EntitySet<AcmaSchemaShadowObjectLink>(new Action<AcmaSchemaShadowObjectLink>(this.attach_ShadowLinks), new Action<AcmaSchemaShadowObjectLink>(this.detach_ShadowLinks));
			this._ShadowChildLinks = new EntitySet<AcmaSchemaShadowObjectLink>(new Action<AcmaSchemaShadowObjectLink>(this.attach_ShadowChildLinks), new Action<AcmaSchemaShadowObjectLink>(this.detach_ShadowChildLinks));
			this._MA_SchemaObject1 = default(EntityRef<AcmaSchemaObjectClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShadowFromObjectClassID", DbType="Int")]
		public System.Nullable<int> ShadowFromObjectClassID
		{
			get
			{
				return this._ShadowFromObjectClassID;
			}
			set
			{
				if ((this._ShadowFromObjectClassID != value))
				{
					if (this._MA_SchemaObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShadowFromObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._ShadowFromObjectClassID = value;
					this.SendPropertyChanged("ShadowFromObjectClassID");
					this.OnShadowFromObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowResurrection", DbType="bit NOT NULL")]
		public bool AllowResurrection
		{
			get
			{
				return this._AllowResurrection;
			}
			set
			{
				if ((this._AllowResurrection != value))
				{
					this.OnAllowResurrectionChanging(value);
					this.SendPropertyChanging();
					this._AllowResurrection = value;
					this.SendPropertyChanged("AllowResurrection");
					this.OnAllowResurrectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaObjectClass", Storage="_MASchemaObjects", ThisKey="ID", OtherKey="ShadowFromObjectClassID")]
		public EntitySet<AcmaSchemaObjectClass> ShadowChildren
		{
			get
			{
				return this._MASchemaObjects;
			}
			set
			{
				this._MASchemaObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaMapping", Storage="_MASchemaMappings", ThisKey="ID", OtherKey="ObjectClassID")]
		public EntitySet<AcmaSchemaMapping> Mappings
		{
			get
			{
				return this._MASchemaMappings;
			}
			set
			{
				this._MASchemaMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaMapping1", Storage="_InheritanceSources", ThisKey="ID", OtherKey="InheritanceSourceObjectClassID")]
		public EntitySet<AcmaSchemaMapping> InheritanceSources
		{
			get
			{
				return this._InheritanceSources;
			}
			set
			{
				this._InheritanceSources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaReferenceLink", Storage="_ReferenceTargetLinks", ThisKey="ID", OtherKey="BackLinkObjectClassID")]
		public EntitySet<AcmaSchemaReferenceLink> BackLinks
		{
			get
			{
				return this._ReferenceTargetLinks;
			}
			set
			{
				this._ReferenceTargetLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaReferenceLink1", Storage="_ReferenceSourceLinks", ThisKey="ID", OtherKey="ForwardLinkObjectClassID")]
		public EntitySet<AcmaSchemaReferenceLink> ForwardLinks
		{
			get
			{
				return this._ReferenceSourceLinks;
			}
			set
			{
				this._ReferenceSourceLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaShadowObjectLink", Storage="_ShadowLinks", ThisKey="ID", OtherKey="ShadowObjectClassID")]
		public EntitySet<AcmaSchemaShadowObjectLink> ShadowLinks
		{
			get
			{
				return this._ShadowLinks;
			}
			set
			{
				this._ShadowLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaShadowObjectLink1", Storage="_ShadowChildLinks", ThisKey="ID", OtherKey="ParentObjectClassID")]
		public EntitySet<AcmaSchemaShadowObjectLink> ShadowChildLinks
		{
			get
			{
				return this._ShadowChildLinks;
			}
			set
			{
				this._ShadowChildLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaObjectClass", Storage="_MA_SchemaObject1", ThisKey="ShadowFromObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass ShadowFromObjectClass
		{
			get
			{
				return this._MA_SchemaObject1.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._MA_SchemaObject1.Entity;
				if (((previousValue != value) 
							|| (this._MA_SchemaObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MA_SchemaObject1.Entity = null;
						previousValue.ShadowChildren.Remove(this);
					}
					this._MA_SchemaObject1.Entity = value;
					if ((value != null))
					{
						value.ShadowChildren.Add(this);
						this._ShadowFromObjectClassID = value.ID;
					}
					else
					{
						this._ShadowFromObjectClassID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShadowFromObjectClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MASchemaObjects(AcmaSchemaObjectClass entity)
		{
			this.SendPropertyChanging();
			entity.ShadowFromObjectClass = this;
		}
		
		private void detach_MASchemaObjects(AcmaSchemaObjectClass entity)
		{
			this.SendPropertyChanging();
			entity.ShadowFromObjectClass = null;
		}
		
		private void attach_MASchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.ObjectClass = this;
		}
		
		private void detach_MASchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.ObjectClass = null;
		}
		
		private void attach_InheritanceSources(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritanceSourceObjectClass = this;
		}
		
		private void detach_InheritanceSources(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritanceSourceObjectClass = null;
		}
		
		private void attach_ReferenceTargetLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.BackLinkObjectClass = this;
		}
		
		private void detach_ReferenceTargetLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.BackLinkObjectClass = null;
		}
		
		private void attach_ReferenceSourceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.ForwardLinkObjectClass = this;
		}
		
		private void detach_ReferenceSourceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.ForwardLinkObjectClass = null;
		}
		
		private void attach_ShadowLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ShadowObjectClass = this;
		}
		
		private void detach_ShadowLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ShadowObjectClass = null;
		}
		
		private void attach_ShadowChildLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ParentObjectClass = this;
		}
		
		private void detach_ShadowChildLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ParentObjectClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SchemaAttributes")]
	public partial class AcmaSchemaAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private global::Lithnet.MetadirectoryServices.ExtendedAttributeType _Type;
		
		private bool _IsMultivalued;
		
		private global::Lithnet.Acma.AcmaAttributeOperation _Operation;
		
		private bool _IsIndexable;
		
		private bool _IsIndexed;
		
		private bool _IsBuiltIn;
		
		private string _TableName;
		
		private string _ColumnName;
		
		private EntitySet<AcmaSchemaMapping> _MA_SchemaMappings;
		
		private EntitySet<AcmaSchemaMapping> _MA_SchemaMappings1;
		
		private EntitySet<AcmaSchemaMapping> _MASchemaMappings;
		
		private EntitySet<AcmaSchemaReferenceLink> _TargetReferenceLinks;
		
		private EntitySet<AcmaSchemaReferenceLink> _SourceReferenceLinks;
		
		private EntitySet<AcmaSchemaShadowObjectLink> _ShadowObjectProvisioningLinks;
		
		private EntitySet<AcmaSchemaShadowObjectLink> _ShadowObjectReferenceLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(global::Lithnet.MetadirectoryServices.ExtendedAttributeType value);
    partial void OnTypeChanged();
    partial void OnIsMultivaluedChanging(bool value);
    partial void OnIsMultivaluedChanged();
    partial void OnOperationChanging(global::Lithnet.Acma.AcmaAttributeOperation value);
    partial void OnOperationChanged();
    partial void OnIsIndexableChanging(bool value);
    partial void OnIsIndexableChanged();
    partial void OnIsIndexedChanging(bool value);
    partial void OnIsIndexedChanged();
    partial void OnIsBuiltInChanging(bool value);
    partial void OnIsBuiltInChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    #endregion
		
		public AcmaSchemaAttribute()
		{
			this._MA_SchemaMappings = new EntitySet<AcmaSchemaMapping>(new Action<AcmaSchemaMapping>(this.attach_MA_SchemaMappings), new Action<AcmaSchemaMapping>(this.detach_MA_SchemaMappings));
			this._MA_SchemaMappings1 = new EntitySet<AcmaSchemaMapping>(new Action<AcmaSchemaMapping>(this.attach_MA_SchemaMappings1), new Action<AcmaSchemaMapping>(this.detach_MA_SchemaMappings1));
			this._MASchemaMappings = new EntitySet<AcmaSchemaMapping>(new Action<AcmaSchemaMapping>(this.attach_MASchemaMappings), new Action<AcmaSchemaMapping>(this.detach_MASchemaMappings));
			this._TargetReferenceLinks = new EntitySet<AcmaSchemaReferenceLink>(new Action<AcmaSchemaReferenceLink>(this.attach_TargetReferenceLinks), new Action<AcmaSchemaReferenceLink>(this.detach_TargetReferenceLinks));
			this._SourceReferenceLinks = new EntitySet<AcmaSchemaReferenceLink>(new Action<AcmaSchemaReferenceLink>(this.attach_SourceReferenceLinks), new Action<AcmaSchemaReferenceLink>(this.detach_SourceReferenceLinks));
			this._ShadowObjectProvisioningLinks = new EntitySet<AcmaSchemaShadowObjectLink>(new Action<AcmaSchemaShadowObjectLink>(this.attach_ShadowObjectProvisioningLinks), new Action<AcmaSchemaShadowObjectLink>(this.detach_ShadowObjectProvisioningLinks));
			this._ShadowObjectReferenceLinks = new EntitySet<AcmaSchemaShadowObjectLink>(new Action<AcmaSchemaShadowObjectLink>(this.attach_ShadowObjectReferenceLinks), new Action<AcmaSchemaShadowObjectLink>(this.detach_ShadowObjectReferenceLinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Lithnet.MetadirectoryServices.ExtendedAttributeType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMultivalued", DbType="Bit NOT NULL")]
		public bool IsMultivalued
		{
			get
			{
				return this._IsMultivalued;
			}
			set
			{
				if ((this._IsMultivalued != value))
				{
					this.OnIsMultivaluedChanging(value);
					this.SendPropertyChanging();
					this._IsMultivalued = value;
					this.SendPropertyChanged("IsMultivalued");
					this.OnIsMultivaluedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Lithnet.Acma.AcmaAttributeOperation Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIndexable", DbType="Bit NOT NULL")]
		public bool IsIndexable
		{
			get
			{
				return this._IsIndexable;
			}
			set
			{
				if ((this._IsIndexable != value))
				{
					this.OnIsIndexableChanging(value);
					this.SendPropertyChanging();
					this._IsIndexable = value;
					this.SendPropertyChanged("IsIndexable");
					this.OnIsIndexableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIndexed", DbType="Bit NOT NULL")]
		public bool IsIndexed
		{
			get
			{
				return this._IsIndexed;
			}
			set
			{
				if ((this._IsIndexed != value))
				{
					this.OnIsIndexedChanging(value);
					this.SendPropertyChanging();
					this._IsIndexed = value;
					this.SendPropertyChanged("IsIndexed");
					this.OnIsIndexedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBuiltIn", DbType="Bit NOT NULL")]
		public bool IsBuiltIn
		{
			get
			{
				return this._IsBuiltIn;
			}
			set
			{
				if ((this._IsBuiltIn != value))
				{
					this.OnIsBuiltInChanging(value);
					this.SendPropertyChanging();
					this._IsBuiltIn = value;
					this.SendPropertyChanged("IsBuiltIn");
					this.OnIsBuiltInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(50)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnName", DbType="NVarChar(50)")]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping", Storage="_MA_SchemaMappings", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<AcmaSchemaMapping> Mappings
		{
			get
			{
				return this._MA_SchemaMappings;
			}
			set
			{
				this._MA_SchemaMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping1", Storage="_MA_SchemaMappings1", ThisKey="ID", OtherKey="InheritanceSourceAttributeID")]
		public EntitySet<AcmaSchemaMapping> InheritanceMappingSources
		{
			get
			{
				return this._MA_SchemaMappings1;
			}
			set
			{
				this._MA_SchemaMappings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping2", Storage="_MASchemaMappings", ThisKey="ID", OtherKey="InheritedAttributeID")]
		public EntitySet<AcmaSchemaMapping> InheritanceMappingValues
		{
			get
			{
				return this._MASchemaMappings;
			}
			set
			{
				this._MASchemaMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaReferenceLink", Storage="_TargetReferenceLinks", ThisKey="ID", OtherKey="BackLinkAttributeID")]
		public EntitySet<AcmaSchemaReferenceLink> BackLinks
		{
			get
			{
				return this._TargetReferenceLinks;
			}
			set
			{
				this._TargetReferenceLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaReferenceLink1", Storage="_SourceReferenceLinks", ThisKey="ID", OtherKey="ForwardLinkAttributeID")]
		public EntitySet<AcmaSchemaReferenceLink> ForwardLinks
		{
			get
			{
				return this._SourceReferenceLinks;
			}
			set
			{
				this._SourceReferenceLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaShadowObjectLink", Storage="_ShadowObjectProvisioningLinks", ThisKey="ID", OtherKey="ProvisioningAttributeID")]
		public EntitySet<AcmaSchemaShadowObjectLink> ShadowObjectProvisioningLinks
		{
			get
			{
				return this._ShadowObjectProvisioningLinks;
			}
			set
			{
				this._ShadowObjectProvisioningLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaShadowObjectLink1", Storage="_ShadowObjectReferenceLinks", ThisKey="ID", OtherKey="ReferenceAttributeID")]
		public EntitySet<AcmaSchemaShadowObjectLink> ShadowObjectReferenceLinks
		{
			get
			{
				return this._ShadowObjectReferenceLinks;
			}
			set
			{
				this._ShadowObjectReferenceLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MA_SchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_MA_SchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_MA_SchemaMappings1(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritanceSourceAttribute = this;
		}
		
		private void detach_MA_SchemaMappings1(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritanceSourceAttribute = null;
		}
		
		private void attach_MASchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritedAttribute = this;
		}
		
		private void detach_MASchemaMappings(AcmaSchemaMapping entity)
		{
			this.SendPropertyChanging();
			entity.InheritedAttribute = null;
		}
		
		private void attach_TargetReferenceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.BackLinkAttribute = this;
		}
		
		private void detach_TargetReferenceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.BackLinkAttribute = null;
		}
		
		private void attach_SourceReferenceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.ForwardLinkAttribute = this;
		}
		
		private void detach_SourceReferenceLinks(AcmaSchemaReferenceLink entity)
		{
			this.SendPropertyChanging();
			entity.ForwardLinkAttribute = null;
		}
		
		private void attach_ShadowObjectProvisioningLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ProvisioningAttribute = this;
		}
		
		private void detach_ShadowObjectProvisioningLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ProvisioningAttribute = null;
		}
		
		private void attach_ShadowObjectReferenceLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceAttribute = this;
		}
		
		private void detach_ShadowObjectReferenceLinks(AcmaSchemaShadowObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SchemaMapping")]
	public partial class AcmaSchemaMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ObjectClassID;
		
		private int _AttributeID;
		
		private System.Nullable<int> _InheritanceSourceAttributeID;
		
		private System.Nullable<int> _InheritedAttributeID;
		
		private bool _IsBuiltIn;
		
		private System.Nullable<int> _InheritanceSourceObjectClassID;
		
		private EntitySet<SafetyRule> _SafetyRules;
		
		private EntityRef<AcmaSchemaAttribute> _MA_SchemaAttribute;
		
		private EntityRef<AcmaSchemaAttribute> _MA_SchemaAttribute1;
		
		private EntityRef<AcmaSchemaAttribute> _MASchemaAttribute;
		
		private EntityRef<AcmaSchemaObjectClass> _MASchemaObject;
		
		private EntityRef<AcmaSchemaObjectClass> _InheritanceSourceObjectClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnObjectClassIDChanging(int value);
    partial void OnObjectClassIDChanged();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    partial void OnInheritanceSourceAttributeIDChanging(System.Nullable<int> value);
    partial void OnInheritanceSourceAttributeIDChanged();
    partial void OnInheritedAttributeIDChanging(System.Nullable<int> value);
    partial void OnInheritedAttributeIDChanged();
    partial void OnIsBuiltInChanging(bool value);
    partial void OnIsBuiltInChanged();
    partial void OnInheritanceSourceObjectClassIDChanging(System.Nullable<int> value);
    partial void OnInheritanceSourceObjectClassIDChanged();
    #endregion
		
		public AcmaSchemaMapping()
		{
			this._SafetyRules = new EntitySet<SafetyRule>(new Action<SafetyRule>(this.attach_SafetyRules), new Action<SafetyRule>(this.detach_SafetyRules));
			this._MA_SchemaAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._MA_SchemaAttribute1 = default(EntityRef<AcmaSchemaAttribute>);
			this._MASchemaAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._MASchemaObject = default(EntityRef<AcmaSchemaObjectClass>);
			this._InheritanceSourceObjectClass = default(EntityRef<AcmaSchemaObjectClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectClassID", DbType="Int NOT NULL")]
		public int ObjectClassID
		{
			get
			{
				return this._ObjectClassID;
			}
			set
			{
				if ((this._ObjectClassID != value))
				{
					if (this._MASchemaObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectClassID = value;
					this.SendPropertyChanged("ObjectClassID");
					this.OnObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._MA_SchemaAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InheritanceSourceAttributeID", DbType="Int")]
		public System.Nullable<int> InheritanceSourceAttributeID
		{
			get
			{
				return this._InheritanceSourceAttributeID;
			}
			set
			{
				if ((this._InheritanceSourceAttributeID != value))
				{
					if (this._MA_SchemaAttribute1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInheritanceSourceAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._InheritanceSourceAttributeID = value;
					this.SendPropertyChanged("InheritanceSourceAttributeID");
					this.OnInheritanceSourceAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InheritedAttributeID", DbType="Int")]
		public System.Nullable<int> InheritedAttributeID
		{
			get
			{
				return this._InheritedAttributeID;
			}
			set
			{
				if ((this._InheritedAttributeID != value))
				{
					if (this._MASchemaAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInheritedAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._InheritedAttributeID = value;
					this.SendPropertyChanged("InheritedAttributeID");
					this.OnInheritedAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBuiltIn", DbType="Bit NOT NULL")]
		public bool IsBuiltIn
		{
			get
			{
				return this._IsBuiltIn;
			}
			set
			{
				if ((this._IsBuiltIn != value))
				{
					this.OnIsBuiltInChanging(value);
					this.SendPropertyChanging();
					this._IsBuiltIn = value;
					this.SendPropertyChanged("IsBuiltIn");
					this.OnIsBuiltInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InheritanceSourceObjectClassID", DbType="Int")]
		public System.Nullable<int> InheritanceSourceObjectClassID
		{
			get
			{
				return this._InheritanceSourceObjectClassID;
			}
			set
			{
				if ((this._InheritanceSourceObjectClassID != value))
				{
					if (this._InheritanceSourceObjectClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInheritanceSourceObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._InheritanceSourceObjectClassID = value;
					this.SendPropertyChanged("InheritanceSourceObjectClassID");
					this.OnInheritanceSourceObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaMapping_SafetyRule", Storage="_SafetyRules", ThisKey="ID", OtherKey="MappingID")]
		public EntitySet<SafetyRule> SafetyRules
		{
			get
			{
				return this._SafetyRules;
			}
			set
			{
				this._SafetyRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping", Storage="_MA_SchemaAttribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public AcmaSchemaAttribute Attribute
		{
			get
			{
				return this._MA_SchemaAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._MA_SchemaAttribute.Entity;
				if (((previousValue != value) 
							|| (this._MA_SchemaAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MA_SchemaAttribute.Entity = null;
						previousValue.Mappings.Remove(this);
					}
					this._MA_SchemaAttribute.Entity = value;
					if ((value != null))
					{
						value.Mappings.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping1", Storage="_MA_SchemaAttribute1", ThisKey="InheritanceSourceAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute InheritanceSourceAttribute
		{
			get
			{
				return this._MA_SchemaAttribute1.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._MA_SchemaAttribute1.Entity;
				if (((previousValue != value) 
							|| (this._MA_SchemaAttribute1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MA_SchemaAttribute1.Entity = null;
						previousValue.InheritanceMappingSources.Remove(this);
					}
					this._MA_SchemaAttribute1.Entity = value;
					if ((value != null))
					{
						value.InheritanceMappingSources.Add(this);
						this._InheritanceSourceAttributeID = value.ID;
					}
					else
					{
						this._InheritanceSourceAttributeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InheritanceSourceAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaMapping2", Storage="_MASchemaAttribute", ThisKey="InheritedAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute InheritedAttribute
		{
			get
			{
				return this._MASchemaAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._MASchemaAttribute.Entity;
				if (((previousValue != value) 
							|| (this._MASchemaAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MASchemaAttribute.Entity = null;
						previousValue.InheritanceMappingValues.Remove(this);
					}
					this._MASchemaAttribute.Entity = value;
					if ((value != null))
					{
						value.InheritanceMappingValues.Add(this);
						this._InheritedAttributeID = value.ID;
					}
					else
					{
						this._InheritedAttributeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InheritedAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaMapping", Storage="_MASchemaObject", ThisKey="ObjectClassID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public AcmaSchemaObjectClass ObjectClass
		{
			get
			{
				return this._MASchemaObject.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._MASchemaObject.Entity;
				if (((previousValue != value) 
							|| (this._MASchemaObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MASchemaObject.Entity = null;
						previousValue.Mappings.Remove(this);
					}
					this._MASchemaObject.Entity = value;
					if ((value != null))
					{
						value.Mappings.Add(this);
						this._ObjectClassID = value.ID;
					}
					else
					{
						this._ObjectClassID = default(int);
					}
					this.SendPropertyChanged("ObjectClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaMapping1", Storage="_InheritanceSourceObjectClass", ThisKey="InheritanceSourceObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass InheritanceSourceObjectClass
		{
			get
			{
				return this._InheritanceSourceObjectClass.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._InheritanceSourceObjectClass.Entity;
				if (((previousValue != value) 
							|| (this._InheritanceSourceObjectClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InheritanceSourceObjectClass.Entity = null;
						previousValue.InheritanceSources.Remove(this);
					}
					this._InheritanceSourceObjectClass.Entity = value;
					if ((value != null))
					{
						value.InheritanceSources.Add(this);
						this._InheritanceSourceObjectClassID = value.ID;
					}
					else
					{
						this._InheritanceSourceObjectClassID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InheritanceSourceObjectClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SafetyRules(SafetyRule entity)
		{
			this.SendPropertyChanging();
			entity.AcmaSchemaMapping = this;
		}
		
		private void detach_SafetyRules(SafetyRule entity)
		{
			this.SendPropertyChanging();
			entity.AcmaSchemaMapping = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SchemaReferenceLinks")]
	public partial class AcmaSchemaReferenceLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SourceObjectClassID;
		
		private int _SourceAttributeID;
		
		private int _TargetAttributeID;
		
		private int _TargetObjectClassID;
		
		private EntityRef<AcmaSchemaAttribute> _TargetAttribute;
		
		private EntityRef<AcmaSchemaAttribute> _SourceAttribute;
		
		private EntityRef<AcmaSchemaObjectClass> _TargetObjectClass;
		
		private EntityRef<AcmaSchemaObjectClass> _SourceObjectClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnForwardLinkObjectClassIDChanging(int value);
    partial void OnForwardLinkObjectClassIDChanged();
    partial void OnForwardLinkAttributeIDChanging(int value);
    partial void OnForwardLinkAttributeIDChanged();
    partial void OnBackLinkAttributeIDChanging(int value);
    partial void OnBackLinkAttributeIDChanged();
    partial void OnBackLinkObjectClassIDChanging(int value);
    partial void OnBackLinkObjectClassIDChanged();
    #endregion
		
		public AcmaSchemaReferenceLink()
		{
			this._TargetAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._SourceAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._TargetObjectClass = default(EntityRef<AcmaSchemaObjectClass>);
			this._SourceObjectClass = default(EntityRef<AcmaSchemaObjectClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SourceObjectClassID", Storage="_SourceObjectClassID", DbType="Int NOT NULL")]
		public int ForwardLinkObjectClassID
		{
			get
			{
				return this._SourceObjectClassID;
			}
			set
			{
				if ((this._SourceObjectClassID != value))
				{
					this.OnForwardLinkObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._SourceObjectClassID = value;
					this.SendPropertyChanged("ForwardLinkObjectClassID");
					this.OnForwardLinkObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SourceAttributeID", Storage="_SourceAttributeID", DbType="Int NOT NULL")]
		public int ForwardLinkAttributeID
		{
			get
			{
				return this._SourceAttributeID;
			}
			set
			{
				if ((this._SourceAttributeID != value))
				{
					this.OnForwardLinkAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._SourceAttributeID = value;
					this.SendPropertyChanged("ForwardLinkAttributeID");
					this.OnForwardLinkAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TargetAttributeID", Storage="_TargetAttributeID", DbType="Int NOT NULL")]
		public int BackLinkAttributeID
		{
			get
			{
				return this._TargetAttributeID;
			}
			set
			{
				if ((this._TargetAttributeID != value))
				{
					this.OnBackLinkAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._TargetAttributeID = value;
					this.SendPropertyChanged("BackLinkAttributeID");
					this.OnBackLinkAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TargetObjectClassID", Storage="_TargetObjectClassID", DbType="Int NOT NULL")]
		public int BackLinkObjectClassID
		{
			get
			{
				return this._TargetObjectClassID;
			}
			set
			{
				if ((this._TargetObjectClassID != value))
				{
					this.OnBackLinkObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._TargetObjectClassID = value;
					this.SendPropertyChanged("BackLinkObjectClassID");
					this.OnBackLinkObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaReferenceLink", Storage="_TargetAttribute", ThisKey="BackLinkAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute BackLinkAttribute
		{
			get
			{
				return this._TargetAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._TargetAttribute.Entity;
				if (((previousValue != value) 
							|| (this._TargetAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetAttribute.Entity = null;
						previousValue.BackLinks.Remove(this);
					}
					this._TargetAttribute.Entity = value;
					if ((value != null))
					{
						value.BackLinks.Add(this);
						this._TargetAttributeID = value.ID;
					}
					else
					{
						this._TargetAttributeID = default(int);
					}
					this.SendPropertyChanged("BackLinkAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaReferenceLink1", Storage="_SourceAttribute", ThisKey="ForwardLinkAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute ForwardLinkAttribute
		{
			get
			{
				return this._SourceAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._SourceAttribute.Entity;
				if (((previousValue != value) 
							|| (this._SourceAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceAttribute.Entity = null;
						previousValue.ForwardLinks.Remove(this);
					}
					this._SourceAttribute.Entity = value;
					if ((value != null))
					{
						value.ForwardLinks.Add(this);
						this._SourceAttributeID = value.ID;
					}
					else
					{
						this._SourceAttributeID = default(int);
					}
					this.SendPropertyChanged("ForwardLinkAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaReferenceLink", Storage="_TargetObjectClass", ThisKey="BackLinkObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass BackLinkObjectClass
		{
			get
			{
				return this._TargetObjectClass.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._TargetObjectClass.Entity;
				if (((previousValue != value) 
							|| (this._TargetObjectClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetObjectClass.Entity = null;
						previousValue.BackLinks.Remove(this);
					}
					this._TargetObjectClass.Entity = value;
					if ((value != null))
					{
						value.BackLinks.Add(this);
						this._TargetObjectClassID = value.ID;
					}
					else
					{
						this._TargetObjectClassID = default(int);
					}
					this.SendPropertyChanged("BackLinkObjectClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaReferenceLink1", Storage="_SourceObjectClass", ThisKey="ForwardLinkObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass ForwardLinkObjectClass
		{
			get
			{
				return this._SourceObjectClass.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._SourceObjectClass.Entity;
				if (((previousValue != value) 
							|| (this._SourceObjectClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceObjectClass.Entity = null;
						previousValue.ForwardLinks.Remove(this);
					}
					this._SourceObjectClass.Entity = value;
					if ((value != null))
					{
						value.ForwardLinks.Add(this);
						this._SourceObjectClassID = value.ID;
					}
					else
					{
						this._SourceObjectClassID = default(int);
					}
					this.SendPropertyChanged("ForwardLinkObjectClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SchemaShadowObjectLinks")]
	public partial class AcmaSchemaShadowObjectLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ParentObjectClassID;
		
		private int _ShadowObjectClassID;
		
		private int _ProvisioningAttributeID;
		
		private int _ReferenceAttributeID;
		
		private string _Name;
		
		private EntityRef<AcmaSchemaAttribute> _ProvisioningAttribute;
		
		private EntityRef<AcmaSchemaAttribute> _ReferenceAttribute;
		
		private EntityRef<AcmaSchemaObjectClass> _ShadowObjectClass;
		
		private EntityRef<AcmaSchemaObjectClass> _ParentObjectClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentObjectClassIDChanging(int value);
    partial void OnParentObjectClassIDChanged();
    partial void OnShadowObjectClassIDChanging(int value);
    partial void OnShadowObjectClassIDChanged();
    partial void OnProvisioningAttributeIDChanging(int value);
    partial void OnProvisioningAttributeIDChanged();
    partial void OnReferenceAttributeIDChanging(int value);
    partial void OnReferenceAttributeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AcmaSchemaShadowObjectLink()
		{
			this._ProvisioningAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._ReferenceAttribute = default(EntityRef<AcmaSchemaAttribute>);
			this._ShadowObjectClass = default(EntityRef<AcmaSchemaObjectClass>);
			this._ParentObjectClass = default(EntityRef<AcmaSchemaObjectClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentObjectClassID", DbType="Int NOT NULL")]
		public int ParentObjectClassID
		{
			get
			{
				return this._ParentObjectClassID;
			}
			set
			{
				if ((this._ParentObjectClassID != value))
				{
					if (this._ParentObjectClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._ParentObjectClassID = value;
					this.SendPropertyChanged("ParentObjectClassID");
					this.OnParentObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShadowObjectClassID", DbType="Int NOT NULL")]
		public int ShadowObjectClassID
		{
			get
			{
				return this._ShadowObjectClassID;
			}
			set
			{
				if ((this._ShadowObjectClassID != value))
				{
					if (this._ShadowObjectClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShadowObjectClassIDChanging(value);
					this.SendPropertyChanging();
					this._ShadowObjectClassID = value;
					this.SendPropertyChanged("ShadowObjectClassID");
					this.OnShadowObjectClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvisioningAttributeID", DbType="Int NOT NULL")]
		public int ProvisioningAttributeID
		{
			get
			{
				return this._ProvisioningAttributeID;
			}
			set
			{
				if ((this._ProvisioningAttributeID != value))
				{
					if (this._ProvisioningAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvisioningAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ProvisioningAttributeID = value;
					this.SendPropertyChanged("ProvisioningAttributeID");
					this.OnProvisioningAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceAttributeID", DbType="Int NOT NULL")]
		public int ReferenceAttributeID
		{
			get
			{
				return this._ReferenceAttributeID;
			}
			set
			{
				if ((this._ReferenceAttributeID != value))
				{
					if (this._ReferenceAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ReferenceAttributeID = value;
					this.SendPropertyChanged("ReferenceAttributeID");
					this.OnReferenceAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaShadowObjectLink", Storage="_ProvisioningAttribute", ThisKey="ProvisioningAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute ProvisioningAttribute
		{
			get
			{
				return this._ProvisioningAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._ProvisioningAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ProvisioningAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProvisioningAttribute.Entity = null;
						previousValue.ShadowObjectProvisioningLinks.Remove(this);
					}
					this._ProvisioningAttribute.Entity = value;
					if ((value != null))
					{
						value.ShadowObjectProvisioningLinks.Add(this);
						this._ProvisioningAttributeID = value.ID;
					}
					else
					{
						this._ProvisioningAttributeID = default(int);
					}
					this.SendPropertyChanged("ProvisioningAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaAttribute_AcmaSchemaShadowObjectLink1", Storage="_ReferenceAttribute", ThisKey="ReferenceAttributeID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaAttribute ReferenceAttribute
		{
			get
			{
				return this._ReferenceAttribute.Entity;
			}
			set
			{
				AcmaSchemaAttribute previousValue = this._ReferenceAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceAttribute.Entity = null;
						previousValue.ShadowObjectReferenceLinks.Remove(this);
					}
					this._ReferenceAttribute.Entity = value;
					if ((value != null))
					{
						value.ShadowObjectReferenceLinks.Add(this);
						this._ReferenceAttributeID = value.ID;
					}
					else
					{
						this._ReferenceAttributeID = default(int);
					}
					this.SendPropertyChanged("ReferenceAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaShadowObjectLink", Storage="_ShadowObjectClass", ThisKey="ShadowObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass ShadowObjectClass
		{
			get
			{
				return this._ShadowObjectClass.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._ShadowObjectClass.Entity;
				if (((previousValue != value) 
							|| (this._ShadowObjectClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShadowObjectClass.Entity = null;
						previousValue.ShadowLinks.Remove(this);
					}
					this._ShadowObjectClass.Entity = value;
					if ((value != null))
					{
						value.ShadowLinks.Add(this);
						this._ShadowObjectClassID = value.ID;
					}
					else
					{
						this._ShadowObjectClassID = default(int);
					}
					this.SendPropertyChanged("ShadowObjectClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaObjectClass_AcmaSchemaShadowObjectLink1", Storage="_ParentObjectClass", ThisKey="ParentObjectClassID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaObjectClass ParentObjectClass
		{
			get
			{
				return this._ParentObjectClass.Entity;
			}
			set
			{
				AcmaSchemaObjectClass previousValue = this._ParentObjectClass.Entity;
				if (((previousValue != value) 
							|| (this._ParentObjectClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentObjectClass.Entity = null;
						previousValue.ShadowChildLinks.Remove(this);
					}
					this._ParentObjectClass.Entity = value;
					if ((value != null))
					{
						value.ShadowChildLinks.Add(this);
						this._ParentObjectClassID = value.ID;
					}
					else
					{
						this._ParentObjectClassID = default(int);
					}
					this.SendPropertyChanged("ParentObjectClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_Sequences")]
	public partial class AcmaSequence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.Nullable<bool> _IsCycleEnabled;
		
		private long _StartValue;
		
		private long? _MinValue;
		
		private long? _MaxValue;
		
		private long _CurrentValue = default(long);
		
		private long _Increment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsCycleEnabledChanging(System.Nullable<bool> value);
    partial void OnIsCycleEnabledChanged();
    partial void OnStartValueChanging(long value);
    partial void OnStartValueChanged();
    partial void OnMinValueChanging(long? value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(long? value);
    partial void OnMaxValueChanged();
    partial void OnIncrementChanging(long value);
    partial void OnIncrementChanged();
    #endregion
		
		public AcmaSequence()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCycleEnabled", DbType="Bit")]
		public System.Nullable<bool> IsCycleEnabled
		{
			get
			{
				return this._IsCycleEnabled;
			}
			set
			{
				if ((this._IsCycleEnabled != value))
				{
					this.OnIsCycleEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsCycleEnabled = value;
					this.SendPropertyChanged("IsCycleEnabled");
					this.OnIsCycleEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartValue", DbType="bigint NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long StartValue
		{
			get
			{
				return this._StartValue;
			}
			set
			{
				if ((this._StartValue != value))
				{
					this.OnStartValueChanging(value);
					this.SendPropertyChanging();
					this._StartValue = value;
					this.SendPropertyChanged("StartValue");
					this.OnStartValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="bigint", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public long? MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="bigint", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public long? MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="bigint NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long CurrentValue
		{
			get
			{
				return this._CurrentValue;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Increment", DbType="bigint NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Increment
		{
			get
			{
				return this._Increment;
			}
			set
			{
				if ((this._Increment != value))
				{
					this.OnIncrementChanging(value);
					this.SendPropertyChanging();
					this._Increment = value;
					this.SendPropertyChanged("Increment");
					this.OnIncrementChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_SafetyRules")]
	public partial class SafetyRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttributeID;
		
		private string _Pattern;
		
		private bool _NullAllowed;
		
		private string _Name;
		
		private EntityRef<AcmaSchemaMapping> _AcmaSchemaMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMappingIDChanging(int value);
    partial void OnMappingIDChanged();
    partial void OnPatternChanging(string value);
    partial void OnPatternChanged();
    partial void OnNullAllowedChanging(bool value);
    partial void OnNullAllowedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SafetyRule()
		{
			this._AcmaSchemaMapping = default(EntityRef<AcmaSchemaMapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int MappingID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._AcmaSchemaMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMappingIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("MappingID");
					this.OnMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pattern", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Pattern
		{
			get
			{
				return this._Pattern;
			}
			set
			{
				if ((this._Pattern != value))
				{
					this.OnPatternChanging(value);
					this.SendPropertyChanging();
					this._Pattern = value;
					this.SendPropertyChanged("Pattern");
					this.OnPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NullAllowed", DbType="Bit NOT NULL")]
		public bool NullAllowed
		{
			get
			{
				return this._NullAllowed;
			}
			set
			{
				if ((this._NullAllowed != value))
				{
					this.OnNullAllowedChanging(value);
					this.SendPropertyChanging();
					this._NullAllowed = value;
					this.SendPropertyChanged("NullAllowed");
					this.OnNullAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="nvarchar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcmaSchemaMapping_SafetyRule", Storage="_AcmaSchemaMapping", ThisKey="MappingID", OtherKey="ID", IsForeignKey=true)]
		public AcmaSchemaMapping AcmaSchemaMapping
		{
			get
			{
				return this._AcmaSchemaMapping.Entity;
			}
			set
			{
				AcmaSchemaMapping previousValue = this._AcmaSchemaMapping.Entity;
				if (((previousValue != value) 
							|| (this._AcmaSchemaMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcmaSchemaMapping.Entity = null;
						previousValue.SafetyRules.Remove(this);
					}
					this._AcmaSchemaMapping.Entity = value;
					if ((value != null))
					{
						value.SafetyRules.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("AcmaSchemaMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Version")]
	public partial class AcmaDBVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MajorReleaseNumber;
		
		private int _MinorReleaseNumber;
		
		private int _PointReleaseNumber;
		
		private string _ScriptName;
		
		private System.DateTime _DateApplied;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMajorReleaseNumberChanging(int value);
    partial void OnMajorReleaseNumberChanged();
    partial void OnMinorReleaseNumberChanging(int value);
    partial void OnMinorReleaseNumberChanged();
    partial void OnPointReleaseNumberChanging(int value);
    partial void OnPointReleaseNumberChanged();
    partial void OnScriptNameChanging(string value);
    partial void OnScriptNameChanged();
    partial void OnDateAppliedChanging(System.DateTime value);
    partial void OnDateAppliedChanged();
    #endregion
		
		public AcmaDBVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorReleaseNumber", DbType="Int NOT NULL")]
		public int MajorReleaseNumber
		{
			get
			{
				return this._MajorReleaseNumber;
			}
			set
			{
				if ((this._MajorReleaseNumber != value))
				{
					this.OnMajorReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._MajorReleaseNumber = value;
					this.SendPropertyChanged("MajorReleaseNumber");
					this.OnMajorReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinorReleaseNumber", DbType="Int NOT NULL")]
		public int MinorReleaseNumber
		{
			get
			{
				return this._MinorReleaseNumber;
			}
			set
			{
				if ((this._MinorReleaseNumber != value))
				{
					this.OnMinorReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._MinorReleaseNumber = value;
					this.SendPropertyChanged("MinorReleaseNumber");
					this.OnMinorReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointReleaseNumber", DbType="Int NOT NULL")]
		public int PointReleaseNumber
		{
			get
			{
				return this._PointReleaseNumber;
			}
			set
			{
				if ((this._PointReleaseNumber != value))
				{
					this.OnPointReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._PointReleaseNumber = value;
					this.SendPropertyChanged("PointReleaseNumber");
					this.OnPointReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScriptName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ScriptName
		{
			get
			{
				return this._ScriptName;
			}
			set
			{
				if ((this._ScriptName != value))
				{
					this.OnScriptNameChanging(value);
					this.SendPropertyChanging();
					this._ScriptName = value;
					this.SendPropertyChanged("ScriptName");
					this.OnScriptNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateApplied", DbType="DateTime NOT NULL")]
		public System.DateTime DateApplied
		{
			get
			{
				return this._DateApplied;
			}
			set
			{
				if ((this._DateApplied != value))
				{
					this.OnDateAppliedChanging(value);
					this.SendPropertyChanging();
					this._DateApplied = value;
					this.SendPropertyChanged("DateApplied");
					this.OnDateAppliedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_Settings")]
	public partial class AcmaSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public AcmaSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(400)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MA_Constants")]
	public partial class AcmaConstant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public AcmaConstant()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class spSequenceGetResult
	{
		
		private string _Sequence_Name;
		
		private System.Nullable<int> _NumericPrecision;
		
		private object _StartValue;
		
		private object _IncrementValue;
		
		private object _MinValue;
		
		private object _MaxValue;
		
		private System.Nullable<bool> _IsCycleEnabled;
		
		private int _CacheSize;
		
		private object _CurrentValue;
		
		public spSequenceGetResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Sequence Name]", Storage="_Sequence_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Sequence_Name
		{
			get
			{
				return this._Sequence_Name;
			}
			set
			{
				if ((this._Sequence_Name != value))
				{
					this._Sequence_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumericPrecision", DbType="Int")]
		public System.Nullable<int> NumericPrecision
		{
			get
			{
				return this._NumericPrecision;
			}
			set
			{
				if ((this._NumericPrecision != value))
				{
					this._NumericPrecision = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartValue", DbType="Variant NOT NULL", CanBeNull=false)]
		public object StartValue
		{
			get
			{
				return this._StartValue;
			}
			set
			{
				if ((this._StartValue != value))
				{
					this._StartValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncrementValue", DbType="Variant NOT NULL", CanBeNull=false)]
		public object IncrementValue
		{
			get
			{
				return this._IncrementValue;
			}
			set
			{
				if ((this._IncrementValue != value))
				{
					this._IncrementValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Variant NOT NULL", CanBeNull=false)]
		public object MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this._MinValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Variant NOT NULL", CanBeNull=false)]
		public object MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this._MaxValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCycleEnabled", DbType="Bit")]
		public System.Nullable<bool> IsCycleEnabled
		{
			get
			{
				return this._IsCycleEnabled;
			}
			set
			{
				if ((this._IsCycleEnabled != value))
				{
					this._IsCycleEnabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CacheSize", DbType="Int NOT NULL")]
		public int CacheSize
		{
			get
			{
				return this._CacheSize;
			}
			set
			{
				if ((this._CacheSize != value))
				{
					this._CacheSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="Variant NOT NULL", CanBeNull=false)]
		public object CurrentValue
		{
			get
			{
				return this._CurrentValue;
			}
			set
			{
				if ((this._CurrentValue != value))
				{
					this._CurrentValue = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
