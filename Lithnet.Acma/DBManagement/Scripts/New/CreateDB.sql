/*
Deployment script for Lithnet.Acma.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[MA_Objects_Delta]...';


GO
CREATE TABLE [dbo].[MA_Objects_Delta] (
    [id]          BIGINT           IDENTITY (1, 1) NOT NULL,
    [objectId]    UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [operation]   NVARCHAR (10)    NOT NULL,
    [rowversion]  ROWVERSION       NOT NULL,
    [objectClass] NVARCHAR (50)    NULL,
    CONSTRAINT [PK_MA_Objects_Delta_1] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[MA_Objects_Delta].[IX_MA_Objects_Delta_objectId]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Objects_Delta_objectId]
    ON [dbo].[MA_Objects_Delta]([objectId] ASC, [operation] ASC) WITH (FILLFACTOR = 85);


GO
PRINT N'Creating [dbo].[MA_SchemaMapping]...';


GO
CREATE TABLE [dbo].[MA_SchemaMapping] (
    [ID]                             INT            IDENTITY (1, 1) NOT NULL,
    [ObjectClassID]                  INT            NOT NULL,
    [AttributeID]                    INT            NOT NULL,
    [InheritanceSourceAttributeID]   INT            NULL,
    [InheritedAttributeID]           INT            NULL,
    [InheritanceSourceObjectClassID] INT            NULL,
    [IsBuiltIn]                      BIT            NOT NULL,
    [Description]                    NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MA_SchemaMapping] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaMapping].[IX_UniqueSchemaObjectAndAttributePair]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UniqueSchemaObjectAndAttributePair]
    ON [dbo].[MA_SchemaMapping]([ObjectClassID] ASC, [AttributeID] ASC);


GO
PRINT N'Creating [dbo].[MA_SchemaObjectClasses]...';


GO
CREATE TABLE [dbo].[MA_SchemaObjectClasses] (
    [ID]                      INT            IDENTITY (1, 1) NOT NULL,
    [Name]                    NVARCHAR (50)  NOT NULL,
    [ShadowFromObjectClassID] INT            NULL,
    [AllowResurrection]       BIT            NOT NULL,
    [Description]             NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MA_SchemaObjects_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaObjectClasses].[IX_MA_SchemaObjects_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_SchemaObjects_Name]
    ON [dbo].[MA_SchemaObjectClasses]([Name] ASC);


GO
PRINT N'Creating [dbo].[MA_SchemaReferenceLinks]...';


GO
CREATE TABLE [dbo].[MA_SchemaReferenceLinks] (
    [ID]                  INT IDENTITY (1, 1) NOT NULL,
    [SourceObjectClassID] INT NOT NULL,
    [SourceAttributeID]   INT NOT NULL,
    [TargetAttributeID]   INT NOT NULL,
    [TargetObjectClassID] INT NOT NULL,
    CONSTRAINT [PK_MA_SchemaReferenceLinks] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaReferenceLinks].[IX_MA_SchemaReferenceLinks]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_SchemaReferenceLinks]
    ON [dbo].[MA_SchemaReferenceLinks]([SourceAttributeID] ASC, [SourceObjectClassID] ASC, [TargetAttributeID] ASC, [TargetObjectClassID] ASC);


GO
PRINT N'Creating [dbo].[MA_Attributes]...';


GO
CREATE TABLE [dbo].[MA_Attributes] (
    [id]                     BIGINT           IDENTITY (1, 1) NOT NULL,
    [objectId]               UNIQUEIDENTIFIER NOT NULL,
    [attributeName]          NVARCHAR (50)    NOT NULL,
    [attributeValueStringIX] NVARCHAR (400)   NULL,
    [attributeValueInt]      BIGINT           NULL,
    [attributeValueBinaryIX] VARBINARY (800)  NULL,
    [attributeValueString]   NVARCHAR (MAX)   NULL,
    [attributeValueBinary]   VARBINARY (MAX)  NULL,
    [attributeValueDateTime] DATETIME2 (3)    NULL,
    CONSTRAINT [PK_MA_Attributes] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[MA_Attributes].[IX_MA_Attributes_objectId_AttributeName]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Attributes_objectId_AttributeName]
    ON [dbo].[MA_Attributes]([objectId] ASC, [attributeName] ASC);


GO
PRINT N'Creating [dbo].[MA_Attributes].[IX_MA_Attributes_attributeName_attributeValueString]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Attributes_attributeName_attributeValueString]
    ON [dbo].[MA_Attributes]([attributeName] ASC, [attributeValueStringIX] ASC)
    INCLUDE([objectId]);


GO
PRINT N'Creating [dbo].[MA_Attributes].[IX_MA_Attributes_attributeName_attributeValueInt]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Attributes_attributeName_attributeValueInt]
    ON [dbo].[MA_Attributes]([attributeName] ASC, [attributeValueInt] ASC)
    INCLUDE([objectId]);


GO
PRINT N'Creating [dbo].[MA_Attributes].[IX_MA_Attributes_attributeName_attributeValueBinary]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Attributes_attributeName_attributeValueBinary]
    ON [dbo].[MA_Attributes]([attributeName] ASC, [attributeValueBinaryIX] ASC)
    INCLUDE([objectId]);


GO
PRINT N'Creating [dbo].[MA_Attributes].[IX_MA_Attributes_attributeName_attributeValueDateTime]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Attributes_attributeName_attributeValueDateTime]
    ON [dbo].[MA_Attributes]([attributeName] ASC, [attributeValueDateTime] ASC);


GO
PRINT N'Creating [dbo].[DB_Version]...';


GO
CREATE TABLE [dbo].[DB_Version] (
    [ID]                 INT          IDENTITY (1, 1) NOT NULL,
    [MajorReleaseNumber] INT          NOT NULL,
    [MinorReleaseNumber] INT          NOT NULL,
    [PointReleaseNumber] INT          NOT NULL,
    [ScriptName]         VARCHAR (50) NOT NULL,
    [DateApplied]        DATETIME     NOT NULL,
    CONSTRAINT [PK_SchemaChangeLog] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaAttributes]...';


GO
CREATE TABLE [dbo].[MA_SchemaAttributes] (
    [ID]            INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50)  NOT NULL,
    [Type]          INT            NOT NULL,
    [IsMultivalued] BIT            NOT NULL,
    [Operation]     INT            NOT NULL,
    [IsIndexable]   BIT            NOT NULL,
    [IsIndexed]     BIT            NOT NULL,
    [IsBuiltIn]     BIT            NOT NULL,
    [TableName]     NVARCHAR (50)  NULL,
    [ColumnName]    NVARCHAR (50)  NULL,
    [Description]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaAttributes].[IX_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Name]
    ON [dbo].[MA_SchemaAttributes]([Name] ASC);


GO
PRINT N'Creating [dbo].[MA_Constants]...';


GO
CREATE TABLE [dbo].[MA_Constants] (
    [ID]    INT            IDENTITY (1, 1) NOT NULL,
    [Name]  NVARCHAR (50)  NOT NULL,
    [Value] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MA_Constants_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_Constants].[IX_MA_Constants]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_Constants]
    ON [dbo].[MA_Constants]([Name] ASC);


GO
PRINT N'Creating [dbo].[MA_SafetyRules]...';


GO
CREATE TABLE [dbo].[MA_SafetyRules] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [MappingID]   INT            NOT NULL,
    [Pattern]     NVARCHAR (MAX) NOT NULL,
    [NullAllowed] BIT            NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MA_SafetyRules] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SafetyRules].[IX_MA_SafetyRules_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_SafetyRules_Name]
    ON [dbo].[MA_SafetyRules]([Name] ASC);


GO
PRINT N'Creating [dbo].[MA_Objects]...';


GO
CREATE TABLE [dbo].[MA_Objects] (
    [id]              INT              IDENTITY (1, 1) NOT NULL,
    [objectId]        UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [objectClass]     NVARCHAR (50)    NOT NULL,
    [deleted]         BIGINT           NOT NULL,
    [inheritedUpdate] BIT              NOT NULL,
    [shadowLink]      NVARCHAR (50)    NULL,
    [shadowParent]    UNIQUEIDENTIFIER NULL,
    [rowversion]      ROWVERSION       NOT NULL,
    CONSTRAINT [PK_MA_Objects] PRIMARY KEY NONCLUSTERED ([objectId] ASC)
);


GO
PRINT N'Creating [dbo].[MA_Objects].[IX_MA_Objects_ID]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IX_MA_Objects_ID]
    ON [dbo].[MA_Objects]([id] ASC);


GO
PRINT N'Creating [dbo].[MA_Objects].[IX_MA_Objects_mvDeleted]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Objects_mvDeleted]
    ON [dbo].[MA_Objects]([deleted] ASC);


GO
PRINT N'Creating [dbo].[MA_Objects].[IX_MA_Objects_shadowParent]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Objects_shadowParent]
    ON [dbo].[MA_Objects]([shadowParent] ASC);


GO
PRINT N'Creating [dbo].[MA_Objects].[IX_MA_Objects_objectClass]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_Objects_objectClass]
    ON [dbo].[MA_Objects]([objectClass] ASC);


GO
PRINT N'Creating [dbo].[MA_SchemaShadowObjectLinks]...';


GO
CREATE TABLE [dbo].[MA_SchemaShadowObjectLinks] (
    [ID]                      INT           IDENTITY (1, 1) NOT NULL,
    [ParentObjectClassID]     INT           NOT NULL,
    [ShadowObjectClassID]     INT           NOT NULL,
    [ProvisioningAttributeID] INT           NOT NULL,
    [ReferenceAttributeID]    INT           NOT NULL,
    [Name]                    NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_MA_SchemaShadowObjectStorage] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [IX_MA_SchemaShadowObjectLinks] UNIQUE NONCLUSTERED ([ParentObjectClassID] ASC, [ProvisioningAttributeID] ASC),
    CONSTRAINT [IX_MA_SchemaShadowObjectLinks_1] UNIQUE NONCLUSTERED ([ParentObjectClassID] ASC, [ReferenceAttributeID] ASC),
    CONSTRAINT [IX_MA_SchemaShadowObjectLinks_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[MA_SchemaShadowObjectLinks].[IX_MA_SchemaShadowObjectLinks_2]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_SchemaShadowObjectLinks_2]
    ON [dbo].[MA_SchemaShadowObjectLinks]([ParentObjectClassID] ASC, [ProvisioningAttributeID] ASC, [ReferenceAttributeID] ASC, [ShadowObjectClassID] ASC);


GO
PRINT N'Creating [dbo].[MA_References]...';


GO
CREATE TABLE [dbo].[MA_References] (
    [ID]            BIGINT           IDENTITY (1, 1) NOT NULL,
    [objectId]      UNIQUEIDENTIFIER NOT NULL,
    [attributeName] NVARCHAR (50)    NOT NULL,
    [value]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_MA_References] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[MA_References].[IX_MA_References_objectID_attributeName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MA_References_objectID_attributeName]
    ON [dbo].[MA_References]([objectId] ASC, [attributeName] ASC, [value] ASC);


GO
PRINT N'Creating [dbo].[MA_References].[IX_MA_References_value]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_References_value]
    ON [dbo].[MA_References]([value] ASC);


GO
PRINT N'Creating [dbo].[MA_References].[IX_MA_References_attributeName_value]...';


GO
CREATE NONCLUSTERED INDEX [IX_MA_References_attributeName_value]
    ON [dbo].[MA_References]([attributeName] ASC, [value] ASC);


GO
PRINT N'Creating [dbo].[MA_Settings]...';


GO
CREATE TABLE [dbo].[MA_Settings] (
    [Name]  NVARCHAR (50)  NOT NULL,
    [Value] NVARCHAR (400) NULL,
    CONSTRAINT [PK_MA_Settings] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[DF_MA_SchemaObjectClasses_AllowResurrection]...';


GO
ALTER TABLE [dbo].[MA_SchemaObjectClasses]
    ADD CONSTRAINT [DF_MA_SchemaObjectClasses_AllowResurrection] DEFAULT ((0)) FOR [AllowResurrection];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_Type]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_Type] DEFAULT ((0)) FOR [Type];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_Multivalued]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_Multivalued] DEFAULT ((0)) FOR [IsMultivalued];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_Operation]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_Operation] DEFAULT ((0)) FOR [Operation];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_Indexable]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_Indexable] DEFAULT ((0)) FOR [IsIndexable];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_Indexed]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_Indexed] DEFAULT ((0)) FOR [IsIndexed];


GO
PRINT N'Creating [dbo].[DF_MA_SchemaAttributes_IsBuiltIn]...';


GO
ALTER TABLE [dbo].[MA_SchemaAttributes]
    ADD CONSTRAINT [DF_MA_SchemaAttributes_IsBuiltIn] DEFAULT ((0)) FOR [IsBuiltIn];


GO
PRINT N'Creating [dbo].[DF_MA_Objects_id]...';


GO
ALTER TABLE [dbo].[MA_Objects]
    ADD CONSTRAINT [DF_MA_Objects_id] DEFAULT (newid()) FOR [objectId];


GO
PRINT N'Creating [dbo].[DF_MA_Objects_mvDeleted]...';


GO
ALTER TABLE [dbo].[MA_Objects]
    ADD CONSTRAINT [DF_MA_Objects_mvDeleted] DEFAULT ((0)) FOR [deleted];


GO
PRINT N'Creating [dbo].[DF_MA_Objects_inheritedUpdate]...';


GO
ALTER TABLE [dbo].[MA_Objects]
    ADD CONSTRAINT [DF_MA_Objects_inheritedUpdate] DEFAULT ((0)) FOR [inheritedUpdate];


GO
PRINT N'Creating [dbo].[FK_MA_SchemaMapping_MA_SchemaAttributes]...';


GO
ALTER TABLE [dbo].[MA_SchemaMapping]
    ADD CONSTRAINT [FK_MA_SchemaMapping_MA_SchemaAttributes] FOREIGN KEY ([AttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaMapping_MA_SchemaAttributes1]...';


GO
ALTER TABLE [dbo].[MA_SchemaMapping]
    ADD CONSTRAINT [FK_MA_SchemaMapping_MA_SchemaAttributes1] FOREIGN KEY ([InheritanceSourceAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaMapping_MA_SchemaAttributes2]...';


GO
ALTER TABLE [dbo].[MA_SchemaMapping]
    ADD CONSTRAINT [FK_MA_SchemaMapping_MA_SchemaAttributes2] FOREIGN KEY ([InheritedAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaMapping_MA_SchemaObjectClasses]...';


GO
ALTER TABLE [dbo].[MA_SchemaMapping]
    ADD CONSTRAINT [FK_MA_SchemaMapping_MA_SchemaObjectClasses] FOREIGN KEY ([InheritanceSourceObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaMapping_MA_SchemaObjects]...';


GO
ALTER TABLE [dbo].[MA_SchemaMapping]
    ADD CONSTRAINT [FK_MA_SchemaMapping_MA_SchemaObjects] FOREIGN KEY ([ObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_SchemaObjectClasses_MA_SchemaObjectClasses]...';


GO
ALTER TABLE [dbo].[MA_SchemaObjectClasses]
    ADD CONSTRAINT [FK_MA_SchemaObjectClasses_MA_SchemaObjectClasses] FOREIGN KEY ([ShadowFromObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaObjects_MA_SchemaObjects]...';


GO
ALTER TABLE [dbo].[MA_SchemaObjectClasses]
    ADD CONSTRAINT [FK_MA_SchemaObjects_MA_SchemaObjects] FOREIGN KEY ([ShadowFromObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaReferenceLinks_MA_SchemaAttributes]...';


GO
ALTER TABLE [dbo].[MA_SchemaReferenceLinks]
    ADD CONSTRAINT [FK_MA_SchemaReferenceLinks_MA_SchemaAttributes] FOREIGN KEY ([TargetAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaReferenceLinks_MA_SchemaObjects]...';


GO
ALTER TABLE [dbo].[MA_SchemaReferenceLinks]
    ADD CONSTRAINT [FK_MA_SchemaReferenceLinks_MA_SchemaObjects] FOREIGN KEY ([SourceAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaReferenceLinks_MA_SchemaObjects1]...';


GO
ALTER TABLE [dbo].[MA_SchemaReferenceLinks]
    ADD CONSTRAINT [FK_MA_SchemaReferenceLinks_MA_SchemaObjects1] FOREIGN KEY ([TargetObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaReferenceLinks_MA_SchemaObjects2]...';


GO
ALTER TABLE [dbo].[MA_SchemaReferenceLinks]
    ADD CONSTRAINT [FK_MA_SchemaReferenceLinks_MA_SchemaObjects2] FOREIGN KEY ([SourceObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_Attributes_MA_Objects]...';


GO
ALTER TABLE [dbo].[MA_Attributes]
    ADD CONSTRAINT [FK_MA_Attributes_MA_Objects] FOREIGN KEY ([objectId]) REFERENCES [dbo].[MA_Objects] ([objectId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_Attributes_MA_SchemaAttributes]...';


GO
ALTER TABLE [dbo].[MA_Attributes]
    ADD CONSTRAINT [FK_MA_Attributes_MA_SchemaAttributes] FOREIGN KEY ([attributeName]) REFERENCES [dbo].[MA_SchemaAttributes] ([Name]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_SafetyRules_MA_SchemaMapping]...';


GO
ALTER TABLE [dbo].[MA_SafetyRules]
    ADD CONSTRAINT [FK_MA_SafetyRules_MA_SchemaMapping] FOREIGN KEY ([MappingID]) REFERENCES [dbo].[MA_SchemaMapping] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_Objects_MA_SchemaObjects]...';


GO
ALTER TABLE [dbo].[MA_Objects]
    ADD CONSTRAINT [FK_MA_Objects_MA_SchemaObjects] FOREIGN KEY ([objectClass]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([Name]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShadowObjectLinkName]...';


GO
ALTER TABLE [dbo].[MA_Objects]
    ADD CONSTRAINT [FK_ShadowObjectLinkName] FOREIGN KEY ([shadowLink]) REFERENCES [dbo].[MA_SchemaShadowObjectLinks] ([Name]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_SchemaShadowObjectLinks_MA_SchemaAttributes]...';


GO
ALTER TABLE [dbo].[MA_SchemaShadowObjectLinks]
    ADD CONSTRAINT [FK_MA_SchemaShadowObjectLinks_MA_SchemaAttributes] FOREIGN KEY ([ProvisioningAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaShadowObjectLinks_MA_SchemaAttributes1]...';


GO
ALTER TABLE [dbo].[MA_SchemaShadowObjectLinks]
    ADD CONSTRAINT [FK_MA_SchemaShadowObjectLinks_MA_SchemaAttributes1] FOREIGN KEY ([ReferenceAttributeID]) REFERENCES [dbo].[MA_SchemaAttributes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaShadowObjectLinks_MA_SchemaObjectClasses]...';


GO
ALTER TABLE [dbo].[MA_SchemaShadowObjectLinks]
    ADD CONSTRAINT [FK_MA_SchemaShadowObjectLinks_MA_SchemaObjectClasses] FOREIGN KEY ([ShadowObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_SchemaShadowObjectLinks_MA_SchemaObjects]...';


GO
ALTER TABLE [dbo].[MA_SchemaShadowObjectLinks]
    ADD CONSTRAINT [FK_MA_SchemaShadowObjectLinks_MA_SchemaObjects] FOREIGN KEY ([ParentObjectClassID]) REFERENCES [dbo].[MA_SchemaObjectClasses] ([ID]);


GO
PRINT N'Creating [dbo].[FK_MA_References_MA_Objects]...';


GO
ALTER TABLE [dbo].[MA_References]
    ADD CONSTRAINT [FK_MA_References_MA_Objects] FOREIGN KEY ([objectId]) REFERENCES [dbo].[MA_Objects] ([objectId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MA_References_MA_SchemaAttributes]...';


GO
ALTER TABLE [dbo].[MA_References]
    ADD CONSTRAINT [FK_MA_References_MA_SchemaAttributes] FOREIGN KEY ([attributeName]) REFERENCES [dbo].[MA_SchemaAttributes] ([Name]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[trigger_clearInheritedUpdate]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[trigger_clearInheritedUpdate] ON dbo.MA_Objects
FOR INSERT, UPDATE AS
BEGIN
    SET NOCOUNT ON;

    UPDATE [dbo].[MA_Objects]
        SET 
            [dbo].[MA_Objects].[inheritedUpdate] = 0
        FROM 
            [inserted]
        WHERE 
            [inserted].[objectId] = [dbo].[MA_Objects].[objectId] AND
            [inserted].[inheritedUpdate] = 1

END
GO
PRINT N'Creating [dbo].[v_Sequences]...';


GO
CREATE VIEW [dbo].[v_Sequences] AS
	SELECT 
		seq.[object_id] as ID,
		name as Name,
		is_cycling as IsCycleEnabled,
		CAST(start_value as bigint) as StartValue,
		CAST(minimum_value as bigint) as MinValue,
		CAST(maximum_value as bigint) as MaxValue,
		CAST(current_value as bigint) as CurrentValue,
		CAST(increment as bigint) as Increment
	FROM
		[sys].sequences AS seq
GO
PRINT N'Creating [dbo].[SchemaMappings]...';


GO
CREATE VIEW dbo.SchemaMappings
AS
SELECT     o.Name AS ObjectClassName, a1.Name AS AttributeName, a2.Name AS InheritanceSource, a3.Name AS InheritedAttribute
FROM         [dbo].MA_SchemaMapping AS m LEFT OUTER JOIN
                      [dbo].MA_SchemaAttributes AS a1 ON m.AttributeID = a1.ID LEFT OUTER JOIN
                      [dbo].MA_SchemaAttributes AS a2 ON m.InheritanceSourceAttributeID = a2.ID LEFT OUTER JOIN
                      [dbo].MA_SchemaAttributes AS a3 ON m.InheritedAttributeID = a3.ID LEFT OUTER JOIN
                      [dbo].MA_SchemaObjectClasses AS o ON m.ObjectClassID = o.ID
GO
PRINT N'Creating [dbo].[v_SchemaReferenceLinks]...';


GO

CREATE VIEW [dbo].[v_SchemaReferenceLinks]
AS
SELECT r.ID, 
r.SourceObjectClassID, 
o1.Name AS SourceObjectClassName, 
r.SourceAttributeID, 
a1.Name AS SourceAttributeName, 
r.TargetAttributeID, 
a2.Name AS TargetAttributeName, 
r.TargetObjectClassID, 
o2.Name AS TargetObjectClassName
FROM         dbo.MA_SchemaReferenceLinks AS r INNER JOIN
                      dbo.MA_SchemaAttributes AS a1 ON r.SourceAttributeID = a1.ID INNER JOIN
                      dbo.MA_SchemaAttributes AS a2 ON r.TargetAttributeID = a2.ID INNER JOIN
                      dbo.MA_SchemaObjectClasses AS o1 ON r.SourceObjectClassID = o1.ID INNER JOIN
                      dbo.MA_SchemaObjectClasses AS o2 ON r.TargetObjectClassID = o2.ID
GO
PRINT N'Creating [dbo].[spGetMAObjects]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Gets database objects up to the specified watermark value
-- =============================================
CREATE PROCEDURE [dbo].[spGetMAObjects]
@watermark rowversion = NULL,
@deleted bit = 0
AS
BEGIN
	SET NOCOUNT ON;

	IF (@deleted = 0)
		IF (@watermark IS NULL)
			SELECT * FROM [dbo].[MA_Objects] WHERE [dbo].[MA_Objects].[deleted] = 0
		ELSE
			SELECT * FROM [dbo].[MA_Objects] WHERE [dbo].[MA_Objects].[deleted] = 0 AND [dbo].[MA_Objects].[rowversion] <= @watermark
	ELSE
		IF (@watermark is NULL)
			SELECT * FROM [dbo].[MA_Objects] 
		ELSE
			SELECT * FROM [dbo].[MA_Objects] WHERE [dbo].[MA_Objects].[rowversion] <= @watermark
		
END
GO
PRINT N'Creating [dbo].[spClearMAObjectsDelta]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Clears the delta table from the specified watermark
-- =============================================
CREATE PROCEDURE [dbo].[spClearMAObjectsDelta]
@watermark rowversion
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM [dbo].[MA_Objects_Delta] WHERE [dbo].[MA_Objects_Delta].[rowversion] <= @watermark
END
GO
PRINT N'Creating [dbo].[spSequenceCreate]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 04/06/2014
-- Description:	Creates a new sequence in the database
-- =============================================
CREATE PROCEDURE [dbo].[spSequenceCreate]
    @sequenceName nvarchar(128),
    @startsWith bigint,
    @incrementBy bigint,
    @minValue bigint,
    @maxValue bigint,
    @cycle bit

AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sql nvarchar(max);

    set @sql =N'CREATE SEQUENCE [dbo].' + quotename(@sequenceName) + N' 
    AS bigint
    START WITH ' + CAST(@startsWith as nvarchar(50))  + N'
    INCREMENT BY ' + CAST(@incrementBy as nvarchar(50)) 
    
    IF (@minValue is null)
        SET @sql = @SQL + N' NO MINVALUE'
    ELSE
        SET @sql = @sql + N' MINVALUE ' + CAST(@minValue as nvarchar(50)) 

    IF (@maxValue is null)
        SET @sql = @sql + N' NO MAXVALUE'
    ELSE
        SET @sql = @sql + N' MAXVALUE ' + CAST(@maxValue as nvarchar(50)) 

    IF (@cycle = 1)
        SET @sql = @sql + N' CYCLE'
    ELSE
        SET @sql = @sql + N' NO CYCLE'


    EXECUTE sp_executesql @sql;

END
GO
PRINT N'Creating [dbo].[spCreateMAObject]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Creates a new object of the specified class
-- =============================================
CREATE PROCEDURE [dbo].[spCreateMAObject]
@id uniqueidentifier,
@objectClass nvarchar(50),
@shadowParent uniqueidentifier = null
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [dbo].[MA_Objects] ([dbo].[MA_Objects].[objectId], [dbo].[MA_Objects].[objectClass], [dbo].[MA_Objects].[shadowParent]) VALUES (@id, @objectClass, @shadowParent);

	SELECT TOP 1 * FROM [dbo].[MA_Objects]
	WHERE [dbo].[MA_Objects].[objectId] = @id;
END
GO
PRINT N'Creating [dbo].[spSequenceGet]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 04/06/2015
-- Description:	Gets a sequence definition from the database
-- =============================================
CREATE PROCEDURE [dbo].[spSequenceGet]
AS
BEGIN
	SET NOCOUNT ON;

   SELECT
		seq.name AS [Sequence Name],
		CAST(seq.precision AS int) AS [NumericPrecision],
		ISNULL(seq.start_value,N'''') AS [StartValue],
		ISNULL(seq.increment,N'''') AS [IncrementValue],
		ISNULL(seq.minimum_value,N'''') AS [MinValue],
		ISNULL(seq.maximum_value,N'''') AS [MaxValue],
		CAST(seq.is_cycling AS bit) AS [IsCycleEnabled],
		ISNULL(seq.cache_size,0) AS [CacheSize],
		ISNULL(seq.current_value,N'''') AS [CurrentValue]
	FROM
		[sys].sequences AS seq

END
GO
PRINT N'Creating [dbo].[spGetHighWatermarkMAObjects]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Gets the high watermark from the MA_Objects table
-- =============================================
CREATE PROCEDURE [dbo].[spGetHighWatermarkMAObjects]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT MAX([dbo].[MA_Objects].[rowversion]) FROM [dbo].[MA_Objects]
END
GO
PRINT N'Creating [dbo].[spGetHighWatermarkMAObjectsDelta]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Gets the highest value for the rowversion
--				column of the MA_Objects_Delta table				
-- =============================================
CREATE PROCEDURE [dbo].[spGetHighWatermarkMAObjectsDelta]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT MAX([dbo].[MA_Objects_Delta].[rowversion]) FROM [dbo].[MA_Objects_Delta]
END
GO
PRINT N'Creating [dbo].[spGetMAObject]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Gets a specific object from the database
-- =============================================
CREATE PROCEDURE [dbo].[spGetMAObject]
	@id uniqueIdentifier
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1 * FROM [dbo].[MA_Objects] WHERE [dbo].[MA_Objects].[objectId]=@id
END
GO
PRINT N'Creating [dbo].[spGetReferences]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Obtains all the objects that reference the specified object, along with the name of the referencing attribute
-- =============================================
CREATE PROCEDURE [dbo].[spGetReferences]
	@id uniqueIdentifier
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT [objectId], [attributeName] FROM [dbo].[MA_References] WHERE [dbo].[MA_References].[value]=@id
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[spGetObjectsOfClass]...';


GO

-- =============================================
-- Author:		Ryan Newington
-- Create date: 2/09/2014
-- Description:	Gets all objects of a specified object class
-- =============================================
CREATE PROCEDURE [dbo].[spGetObjectsOfClass]
	@objectClass nvarchar(50)
AS
BEGIN
	DECLARE @id INT
	DECLARE @name NVARCHAR(100)
	DECLARE @getid CURSOR
	DECLARE @columns NVARCHAR(MAX)
	SET @columns = 'id'

	SET @getid = CURSOR FOR
		SELECT 
			a.[ColumnName]
		FROM
			 [dbo].[MA_SchemaMapping] m
		JOIN
			 [dbo].[MA_SchemaObjectClasses] o
		ON 
			m.[ObjectClassID] = o.[ID]
		JOIN 
			[dbo].[MA_SchemaAttributes] a
		ON 
			a.[ID] = m.[AttributeID]
		WHERE 
			o.[Name] = @objectClass
			AND m.[InheritanceSourceAttributeID] is null
			AND a.[IsMultivalued] = 0
			AND a.[Type] != 2

	OPEN @getid
	FETCH NEXT FROM @getid INTO @name
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @columns = @columns + ', ' + QUOTENAME(@name)
		FETCH NEXT FROM @getid INTO @name
	END

	CLOSE @getid
	DEALLOCATE @getid

	DECLARE @params nvarchar(200) = N'@objectClass nvarchar(50)'
	DECLARE @sql nvarchar(max) = N'SELECT ' + @columns + N' FROM MA_Objects where objectClass=@objectClass'
	EXEC sp_executesql @sql, @params, @objectClass
END
GO
PRINT N'Creating [dbo].[spSchemaDeleteIndex]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Deletes an index from the MA_Objects table
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaDeleteIndex]
	@attributeName nvarchar(50)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(4000);
	
	DECLARE @table nvarchar(50);

	SELECT @table = [MA_SchemaAttributes].[TableName]
	FROM [dbo].[MA_SchemaAttributes] WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName;
	
	IF (@table != 'MA_Objects')
		THROW 50010, N'Cannot delete the index of an attribute not in the objects table', 1;

	BEGIN TRANSACTION
		IF EXISTS (SELECT [sys].[indexes].[name] FROM sys.indexes WHERE [sys].[indexes].[name] = N'IX_MA_Objects_' + @attributeName)
			BEGIN
				SET @sql = N'DROP INDEX [IX_MA_Objects_' + @attributeName +'] ON [dbo].[MA_Objects]'
				EXEC sp_executesql @sql
			END
					
		UPDATE dbo.MA_SchemaAttributes
		SET [dbo].[MA_SchemaAttributes].[IsIndexed] = 0
		WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName
	
	COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[spSchemaHasIndexForColumn]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Determines if an index exists on the MA_Objects table
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaHasIndexForColumn]
	@columnName nvarchar(50)
AS

BEGIN
	IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = N'IX_MA_Objects_' + @columnName)
		BEGIN
			SELECT 1;
			RETURN;	
		END
	ELSE
		BEGIN
			SELECT 0;
			RETURN;
		END
END
GO
PRINT N'Creating [dbo].[spSchemaHasColumn]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Determines if a column exists in the MA_Objects table
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaHasColumn]
	@columnName nvarchar(50) 
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MA_Objects' AND COLUMN_NAME=@columnName)
		BEGIN
			RETURN 1;
		END
	ELSE
		BEGIN
			RETURN 0;
		END
END
GO
PRINT N'Creating [dbo].[spChangeMAObjectId]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 21-01-2014
-- Description:	Updates the ID of an MAObject
-- =============================================
CREATE PROCEDURE [dbo].[spChangeMAObjectId]
	@oldId uniqueidentifier,
	@newId uniqueidentifier,
	@undelete bit = 0
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRANSACTION
		IF @undelete = 0
			BEGIN
				UPDATE [dbo].[MA_Objects]
					SET 
						[dbo].[MA_Objects].[objectId]=@newId 
					WHERE 
						[dbo].[MA_Objects].[objectId]=@oldId

				UPDATE [dbo].[MA_Objects]
					SET 
						[dbo].[MA_Objects].[shadowParent]=@newId
					WHERE 
						[dbo].[MA_Objects].[shadowParent]=@oldId
			END
		ELSE
			BEGIN
				UPDATE [dbo].[MA_Objects]
					SET 
						[dbo].[MA_Objects].[objectId]=@newId, 
						[dbo].[MA_Objects].[deleted]=0
					WHERE 
						[dbo].[MA_Objects].[objectId]=@oldId

				UPDATE [dbo].[MA_Objects]
					SET 
						[dbo].[MA_Objects].[shadowParent]=@newId
					WHERE 
						[dbo].[MA_Objects].[shadowParent]=@oldId
			END

		UPDATE [dbo].[MA_References]
			SET
				[dbo].[MA_References].[value] = @newId
			WHERE
				[dbo].MA_References.[value] = @oldId

	COMMIT
END
GO
PRINT N'Creating [dbo].[spSequenceGetNextValue]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 04/06/2015
-- Description:	Gets the next value from the specified sequence
-- =============================================
CREATE PROCEDURE [dbo].[spSequenceGetNextValue]
	@sequenceName nvarchar(50)
AS
	SET NOCOUNT ON;
	DECLARE @nextValue bigint;

	DECLARE @sql nvarchar(1000) = N'SET @nextValueOUT = NEXT VALUE FOR [dbo].' + QUOTENAME(@sequenceName);
	DECLARE @params nvarchar(100) = N'@nextValueOUT bigint OUTPUT';
	EXEC sp_executesql @sql, @params, @nextValueOUT = @nextValue OUTPUT;

	return @nextValue;
GO
PRINT N'Creating [dbo].[spSchemaRenameObjectClass]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 30-05-2014
-- Description:	Renames an object class in the schema
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaRenameObjectClass]
    @className nvarchar(50),
    @newClassName nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION
        SET QUOTED_IDENTIFIER ON
        SET ARITHABORT ON
        SET NUMERIC_ROUNDABORT OFF
        SET CONCAT_NULL_YIELDS_NULL ON
        SET ANSI_NULLS ON
        SET ANSI_PADDING ON
        SET ANSI_WARNINGS ON
    COMMIT

        BEGIN TRANSACTION
                
            UPDATE [dbo].[MA_SchemaObjectClasses]
            SET [dbo].[MA_SchemaObjectClasses].[Name] = @newClassName
            WHERE [dbo].[MA_SchemaObjectClasses].[Name] = @className

        COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[spCreateDeltaEntry]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 11/1/2014
-- Description:	Creates or updates a record in the delta change table
-- =============================================
CREATE PROCEDURE [dbo].[spCreateDeltaEntry]
	@objectId uniqueidentifier,
	@changeType nvarchar(10),
	@objectClass nvarchar(50) = null
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @existingChangeType nvarchar(10);
    
	SET @existingChangeType = (SELECT TOP 1 [delta].[operation] FROM [dbo].[MA_Objects_Delta] as [delta]
	WHERE [delta].[objectId] = @objectId);

	SET @changeType = (
		SELECT 
			CASE
				WHEN (@existingChangeType IS NULL) THEN @changeType
				WHEN (@changeType = 'add' AND @existingChangeType = 'add') THEN 'add'
				WHEN (@changeType = 'add' AND @existingChangeType = 'modify') THEN 'modify'
				WHEN (@changeType = 'add' AND @existingChangeType = 'delete') THEN 'modify'
				WHEN (@changeType = 'modify' AND @existingChangeType = 'add') THEN 'add'
				WHEN (@changeType = 'modify' AND @existingChangeType = 'modify') THEN 'modify'
				WHEN (@changeType = 'modify' AND @existingChangeType = 'delete') THEN 'modify'
				WHEN (@changeType = 'delete' AND @existingChangeType = 'add') THEN NULL
				WHEN (@changeType = 'delete' AND @existingChangeType = 'modify') THEN 'delete'
				WHEN (@changeType = 'delete' AND @existingChangeType = 'delete') THEN 'delete'
				ELSE 'modify'
			END
			);

	IF (@changeType IS NULL AND @existingChangeType IS NOT NULL) 
		BEGIN
			DELETE FROM [dbo].[MA_Objects_Delta] WHERE [dbo].[MA_Objects_Delta].[objectId] = @objectId;
			RETURN;
		END

	IF (@changeType IS NULL AND @existingChangeType IS NULL)
		RETURN;

	IF (@existingChangeType IS NULL)
		INSERT INTO [dbo].[MA_Objects_Delta]
			([dbo].[MA_Objects_Delta].[objectId], [dbo].[MA_Objects_Delta].[operation], [dbo].[MA_Objects_Delta].[objectClass])
		VALUES 
			(@objectId, @changeType, @objectClass);
	ELSE
		UPDATE [dbo].[MA_Objects_Delta]
		SET 
		[dbo].[MA_Objects_Delta].[operation]=@changeType,
		[dbo].[MA_Objects_Delta].[objectClass]=@objectClass
		WHERE
		([dbo].[MA_Objects_Delta].[objectId] = @objectId);
END
GO
PRINT N'Creating [dbo].[spSequenceModify]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 04/06/2015
-- Description:	Modifies the parameters of a database sequence
-- =============================================
CREATE PROCEDURE [dbo].[spSequenceModify]
    @sequenceName nvarchar(128),
    @newSequenceName nvarchar(128),
    @restartWith bigint,
    @incrementBy bigint,
    @minValue bigint,
    @maxValue bigint,
    @cycle bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(500);

    set @sql =N'ALTER SEQUENCE [dbo].' + quotename(@sequenceName) + N' 
    RESTART WITH ' + CAST(@restartWith as nvarchar(50))  + N'
    INCREMENT BY ' + CAST(@incrementBy as nvarchar(50)) 
    
    IF (@minValue is null)
        SET @sql = @SQL + N' NO MINVALUE'
    ELSE
        SET @sql = @sql + N' MINVALUE ' + CAST(@minValue as nvarchar(50)) 

    IF (@maxValue is null)
        SET @sql = @sql + N' NO MAXVALUE'
    ELSE
        SET @sql = @sql + N' MAXVALUE ' + CAST(@maxValue as nvarchar(50)) 

    IF (@cycle = 1)
        SET @sql = @sql + N' CYCLE'
    ELSE
        SET @sql = @sql + N' NO CYCLE'

    EXECUTE sp_executesql @sql;

    IF (@newSequenceName is not null)
        IF (@newSequenceName != @sequenceName)
            BEGIN
                DECLARE @existingName nvarchar(150) = '[dbo].' + quotename(@sequenceName);
                EXECUTE sp_rename @existingName, @newSequenceName;
            END

END
GO
PRINT N'Creating [dbo].[spSequenceDelete]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 04/06/2014
-- Description:	Deletes a sequence from the database
-- =============================================
CREATE PROCEDURE [dbo].[spSequenceDelete]
	@sequenceName nvarchar(128)
AS
BEGIN
	SET NOCOUNT ON;
    DECLARE @sql nvarchar(500) = N'DROP SEQUENCE [dbo].' + quotename(@sequenceName);
	EXECUTE sp_executesql @sql;
END
GO
PRINT N'Creating [dbo].[spGetMAObjectsDelta]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 03/03/2015
-- Description:	Gets the database objects from the delta table up to the specified watermark
-- =============================================
CREATE PROCEDURE [dbo].[spGetMAObjectsDelta]
@watermark rowversion = NULL,
@deleted bit = 0
AS
BEGIN
    SET NOCOUNT ON;

    IF (@deleted = 0)
        IF (@watermark IS NULL)
            SELECT	   o.*, 
                       d.[operation], 
                       d.[rowversion] as [rowversiondelta],
                       d.[objectId] as [deltaObjectId],
					   d.[objectClass] as [deltaObjectClass]
            FROM       [dbo].[MA_Objects_Delta] d
            LEFT JOIN  [dbo].[MA_Objects] o ON 
                       d.[objectId] = o.[objectId]
            WHERE	   o.[deleted] = 0

        ELSE
            SELECT	   o.*, 
                       d.[operation], 
                       d.[rowversion] as [rowversiondelta],
                       d.[objectId] as [deltaObjectId],
					   d.[objectClass] as [deltaObjectClass]
            FROM       [dbo].[MA_Objects_Delta] d
            LEFT JOIN  [dbo].[MA_Objects] o ON 
                       d.[objectId] = o.[objectId]
            WHERE	   o.[deleted] = 0
            AND		   d.[rowversion] <= @watermark

    ELSE
        IF (@watermark IS NULL)
            SELECT	   o.*, 
                       d.[operation], 
                       d.[rowversion] as [rowversiondelta],
                       d.[objectId] as [deltaObjectId],
					   d.[objectClass] as [deltaObjectClass]
            FROM       [dbo].[MA_Objects_Delta] d
            LEFT JOIN  [dbo].[MA_Objects] o ON 
                       d.[objectId] = o.[objectId]
        ELSE
            SELECT	   o.*, 
                       d.[operation], 
                       d.[rowversion] as [rowversiondelta],
                       d.[objectId] as [deltaObjectId],
					   d.[objectClass] as [deltaObjectClass]
            FROM       [dbo].[MA_Objects_Delta] d
            LEFT JOIN  [dbo].[MA_Objects] o ON 
                       d.[objectId] = o.[objectId]
            WHERE	   d.[rowversion] <= @watermark
END
GO
PRINT N'Creating [dbo].[spDeleteMAObject]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteMAObject]
@id uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM [dbo].[MA_Objects] WHERE [dbo].[MA_Objects].[objectId]=@id;
END
GO
PRINT N'Creating [dbo].[trigger_modify_MA_Attributes]...';


GO
CREATE TRIGGER [dbo].[trigger_modify_MA_Attributes]
ON [dbo].[MA_Attributes]
FOR INSERT, UPDATE AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;

        DECLARE cur CURSOR LOCAL FOR
        SELECT [inserted].[objectId] FROM [inserted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'modify';
            FETCH NEXT FROM cur INTO @objectId
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[trigger_delete_MA_Attributes]...';


GO
CREATE TRIGGER [dbo].[trigger_delete_MA_Attributes]
ON [dbo].[MA_Attributes]
FOR DELETE AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;

        DECLARE cur CURSOR LOCAL FOR
        SELECT [deleted].[objectId] FROM [deleted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'modify';
            FETCH NEXT FROM cur INTO @objectId
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[trigger_add_MA_Objects]...';


GO
CREATE TRIGGER [dbo].[trigger_add_MA_Objects]
ON dbo.MA_Objects
FOR INSERT AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;

        DECLARE cur CURSOR LOCAL FOR
        SELECT [inserted].[objectId] FROM [inserted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'add';
            FETCH NEXT FROM cur INTO @objectId
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[trigger_modify_MA_Objects]...';


GO
CREATE TRIGGER [dbo].[trigger_modify_MA_Objects]
ON [dbo].[MA_Objects]
FOR UPDATE AS
BEGIN
    SET NOCOUNT ON
        
    IF ((SELECT TRIGGER_NESTLEVEL()) > 1)
        RETURN;

    DECLARE @objectId uniqueidentifier;
    DECLARE @oldDeleted bigint;
    DECLARE @newDeleted bigint;
	DECLARE @deletedObjectClass nvarchar(50);

    DECLARE cur CURSOR LOCAL FOR
        SELECT [inserted].[objectId], [deleted].[deleted], [inserted].[deleted], [deleted].[objectClass] FROM [inserted]
        INNER JOIN [deleted] ON [inserted].[objectId] = [deleted].[objectId];

    OPEN cur
    FETCH NEXT FROM cur into @objectId, @oldDeleted, @newDeleted, @deletedObjectClass

    WHILE @@FETCH_STATUS = 0 
    BEGIN
        DECLARE @changeType nvarchar(10) =
            CASE
                WHEN (@oldDeleted = 0 AND @newDeleted > 0) THEN N'delete'
                WHEN (@oldDeleted > 0 AND @newDeleted = 0) THEN N'add'
                ELSE N'modify'
            END;

        EXEC [dbo].[spCreateDeltaEntry] @objectId, @changeType, @deletedObjectClass;
        FETCH NEXT FROM cur INTO  @objectId, @oldDeleted, @newDeleted, @deletedObjectClass
    END

    CLOSE cur
    DEALLOCATE cur
END
GO
PRINT N'Creating [dbo].[trigger_delete_MA_Objects]...';


GO
CREATE TRIGGER [dbo].[trigger_delete_MA_Objects]
ON [dbo].[MA_Objects]
FOR DELETE AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;
		DECLARE @objectClass nvarchar(50);

        DECLARE cur CURSOR LOCAL FOR
        SELECT [deleted].[objectId], [deleted].[objectClass] FROM [deleted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId, @objectClass

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'delete', @objectClass;
            FETCH NEXT FROM cur INTO @objectId, @objectClass
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[trigger_modify_MA_References]...';


GO
CREATE TRIGGER [dbo].[trigger_modify_MA_References]
ON [dbo].[MA_References]
FOR INSERT, UPDATE AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;

        DECLARE cur CURSOR LOCAL FOR
        SELECT [inserted].[objectId] FROM [inserted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'modify';
            FETCH NEXT FROM cur INTO @objectId
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[trigger_delete_MA_References]...';


GO

CREATE TRIGGER [dbo].[trigger_delete_MA_References]
ON [dbo].[MA_References]
FOR DELETE AS
    BEGIN
        SET NOCOUNT ON
        DECLARE @objectId uniqueidentifier;

        DECLARE cur CURSOR LOCAL FOR
        SELECT [deleted].[objectId] FROM [deleted]

        OPEN cur
        FETCH NEXT FROM cur into @objectId

        WHILE @@FETCH_STATUS = 0 
        BEGIN
            EXEC [dbo].[spCreateDeltaEntry] @objectId, N'modify';
            FETCH NEXT FROM cur INTO @objectId
        END

        CLOSE cur
        DEALLOCATE cur
    END
GO
PRINT N'Creating [dbo].[spSchemaDeleteAttribute]...';


GO

-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Deletes an attribute from the schema
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaDeleteAttribute]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION
        SET QUOTED_IDENTIFIER ON
        SET ARITHABORT ON
        SET NUMERIC_ROUNDABORT OFF
        SET CONCAT_NULL_YIELDS_NULL ON
        SET ANSI_NULLS ON
        SET ANSI_PADDING ON
        SET ANSI_WARNINGS ON
    COMMIT
    /*
        String = 0,
        Integer = 1,
        Reference = 2,
        Binary = 3,
        Boolean = 4,
        Undefined = 5,
        DateTime = 6
    */

    DECLARE @tableName nvarchar(50);
    DECLARE @columnName nvarchar(50);

    DECLARE @isBuiltIn bit;
    DECLARE @isIndexed bit;
    DECLARE @name nvarchar(50);
    DECLARE @count int;
    DECLARE @type int;

    SELECT TOP 1
        @count = 1,
        @isBuiltIn = [dbo].[MA_SchemaAttributes].[IsBuiltIn],
        @name = [dbo].[MA_SchemaAttributes].[Name],
		@type = [dbo].[MA_SchemaAttributes].[Type],
        @isIndexed = [dbo].[MA_SchemaAttributes].[IsIndexed],
        @tableName = [dbo].[MA_SchemaAttributes].[TableName],
        @columnName = [dbo].[MA_SchemaAttributes].[ColumnName]
    FROM [dbo].[MA_SchemaAttributes]
    WHERE [dbo].[MA_SchemaAttributes].[ID] = @ID

    IF (@count is null)
        THROW 50009, N'Attribute not found', 1;

    IF (@isBuiltIn is null)
        THROW 50020, N'Cannot delete a built-in attribute', 1;
 
    DECLARE @sql nvarchar(4000);

    BEGIN TRANSACTION
    
        IF (@tableName = 'MA_Objects')
            BEGIN
                IF (@isIndexed = 1)
                    EXEC [dbo].[spSchemaDeleteIndex] @columnName

				IF (@type = 4)
					BEGIN
					declare @constraintName nvarchar(100) = N'[DF_MA_Objects_' + @name + ']'
					IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(@constraintName) AND type = 'D')
						BEGIN    
							SET @sql = 'ALTER TABLE [dbo].MA_Objects DROP CONSTRAINT ' + @constraintName; 
							EXEC sp_executesql @sql
						END
					END

                DECLARE @hasColumn bit;
                EXEC @hasColumn = [dbo].[spSchemaHasColumn] @columnName;

                if (@hasColumn = 1)
                    BEGIN
                        SET @sql = N'ALTER TABLE [dbo].[MA_Objects] DROP COLUMN ' + @columnName;
                        EXEC sp_executesql @sql;
                        ALTER TABLE [dbo].[MA_Objects] SET (LOCK_ESCALATION = TABLE);
                    END
            END
        ELSE
            BEGIN
                SET @sql = N'DELETE FROM [dbo].[' + @tableName + '] where attributeName = @name;'
            END


        DELETE FROM [dbo].[MA_SchemaAttributes]
            WHERE [dbo].[MA_SchemaAttributes].[ID] = @ID;
    COMMIT
END
GO
PRINT N'Creating [dbo].[spSchemaCreateIndex]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Creates an index on the MA_Objects table
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaCreateIndex]
    @attributeName nvarchar(50) 
AS
BEGIN
    DECLARE @sql nvarchar(4000);
    SET NOCOUNT ON;

    DECLARE @operation int;
    DECLARE @tableName nvarchar(50);

    SELECT  @operation = [dbo].[MA_SchemaAttributes].[Operation],
            @tableName = [dbo].[MA_SchemaAttributes].[TableName]
    FROM [dbo].[MA_SchemaAttributes] WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName;
    
    IF (@tableName != 'MA_Objects')
        THROW 50010, N'Cannot modify the index of an object that is not in the MA_Objects table', 1;

    IF (@operation = 4)
        THROW 50011, N'Cannot create an index on a temporary attribute',1;
        
    BEGIN TRANSACTION
        EXEC [dbo].[spSchemaDeleteIndex] @attributeName;
        SET @sql = N'CREATE NONCLUSTERED INDEX IX_MA_Objects_' + @attributeName + N' ON [dbo].[MA_Objects] (' + @attributeName + N') 
                WITH (STATISTICS_NORECOMPUTE = OFF, 
                        IGNORE_DUP_KEY = OFF, 
                        ALLOW_ROW_LOCKS = ON, 
                        ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]'
        EXEC sp_executesql @sql

        UPDATE dbo.MA_SchemaAttributes
        SET [dbo].[MA_SchemaAttributes].[IsIndexed] = 1
        WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName

    COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[spSchemaRenameAttribute]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 30-05-2014
-- Description:	Renames an attribute in the schema
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaRenameAttribute]
    @attributeName nvarchar(50),
    @newAttributeName nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION
        SET QUOTED_IDENTIFIER ON
        SET ARITHABORT ON
        SET NUMERIC_ROUNDABORT OFF
        SET CONCAT_NULL_YIELDS_NULL ON
        SET ANSI_NULLS ON
        SET ANSI_PADDING ON
        SET ANSI_WARNINGS ON
    COMMIT

    DECLARE @isMultiValued bit;
    DECLARE @isIndexed bit;
    DECLARE @tableName nvarchar(50);
	DECLARE @type int;

    SELECT 
		@isIndexed = [dbo].[MA_SchemaAttributes].[IsIndexed],
		@tableName = [dbo].[MA_SchemaAttributes].[TableName],
		@type = [dbo].[MA_SchemaAttributes].[Type]
    FROM [dbo].[MA_SchemaAttributes] WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName;

    BEGIN TRANSACTION
        IF (@tableName = 'MA_Objects')
            BEGIN
                IF (@isIndexed = 1)
                    EXEC [dbo].spSchemaDeleteIndex @attributeName;

                DECLARE @columnName nvarchar(150);
                SET @columnName = 'MA_Objects.' + @attributeName;
                EXEC [dbo].[sp_rename] @columnName, @newAttributeName, 'COLUMN';
            
				IF (@type = 4)
				BEGIN
					declare @constraintName nvarchar(100) = N'[DF_MA_Objects_' + @attributeName + ']'
					IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(@constraintName) AND type = 'D')
						BEGIN
							DECLARE @oldDefaultName nvarchar(100) = N'DF_MA_Objects_' + @attributeName;
							DECLARE @newDefaultName nvarchar(100) = N'DF_MA_Objects_' + @newAttributeName;
							exec sp_rename @oldDefaultName, @newDefaultName, 'object'
						END
				END

                IF (@isIndexed = 1)
                    EXEC [dbo].spSchemaCreateIndex @newAttributeName;

				UPDATE [dbo].[MA_SchemaAttributes]
				SET 
					[dbo].[MA_SchemaAttributes].[ColumnName] = @newAttributeName,
					[dbo].[MA_SchemaAttributes].[Name] = @newAttributeName
				WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName
            END
		ELSE
			BEGIN
				UPDATE [dbo].[MA_SchemaAttributes]
				SET [dbo].[MA_SchemaAttributes].[Name] = @newAttributeName
				WHERE [dbo].[MA_SchemaAttributes].[Name] = @attributeName
			END

    COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[spSchemaSetupNewAttribute]...';


GO
-- =============================================
-- Author:		Ryan Newington
-- Create date: 22-01-2014
-- Description:	Configures a new attribute in the schema
-- =============================================
CREATE PROCEDURE [dbo].[spSchemaSetupNewAttribute]
    @ID int
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION
        SET QUOTED_IDENTIFIER ON
        SET ARITHABORT ON
        SET NUMERIC_ROUNDABORT OFF
        SET CONCAT_NULL_YIELDS_NULL ON
        SET ANSI_NULLS ON
        SET ANSI_PADDING ON
        SET ANSI_WARNINGS ON
    COMMIT
    /*
        String = 0,
        Integer = 1,
        Reference = 2,
        Binary = 3,
        Boolean = 4,
        Undefined = 5
        DateTime = 99,
    */

    DECLARE @dataType nvarchar(30);
    DECLARE @tableName nvarchar(50);
    DECLARE @columnName nvarchar(50);

    DECLARE @operation int;
    DECLARE @isMultiValued bit;
    DECLARE @type int;
    DECLARE @isIndexed bit;
    DECLARE @isIndexable bit;
    DECLARE @name nvarchar(50);
    DECLARE @count int;
    
    SELECT TOP 1
        @count = 1,
        @name = [dbo].[MA_SchemaAttributes].[Name],
        @operation = [dbo].[MA_SchemaAttributes].[Operation],
        @isMultiValued = [dbo].[MA_SchemaAttributes].[IsMultivalued],
        @type = [dbo].[MA_SchemaAttributes].[Type],
        @isIndexable = [dbo].[MA_SchemaAttributes].[IsIndexable],
        @isIndexed = [dbo].[MA_SchemaAttributes].[IsIndexed]
    FROM [dbo].[MA_SchemaAttributes]
    WHERE [dbo].[MA_SchemaAttributes].[ID] = @ID

    IF (@count is null)
        THROW 50009, N'Attribute not found', 1;
 
    IF (@operation = 4) -- AcmaInternalTemp
        BEGIN
            SET @isIndexable = 0;
            SET @isIndexed = 0;
        END
    
    IF (@type = 2)
        SET @tableName = 'MA_References';
    ELSE IF (@isMultiValued = 1)
        SET @tableName = 'MA_Attributes';
    ELSE
        SET @tableName = 'MA_Objects';

    IF (@type = 0) -- String
        BEGIN
            IF (@isIndexable = 1)
                SET @dataType = N'nvarchar(400)';
            ELSE
                SET @dataType = N'nvarchar(MAX)';
            
            IF (@isMultiValued = 1)
                IF (@isIndexable = 1)
                    SET @columnName = N'attributeValueStringIX';
                ELSE
                    SET @columnName = N'attributeValueString';
            ELSE
                SET @columnName = @name;
        END

    ELSE IF (@type = 1) --Integer
        BEGIN
            SET @dataType = 'bigint';

            IF (@isMultiValued = 1)
                SET @columnName = N'attributeValueInt';
            ELSE
                SET @columnName = @name;

            SET @isIndexable = 1;
        END

    ELSE IF (@type = 2) -- Reference
        BEGIN
            SET @dataType = 'uniqueidentifier'
            SET @isIndexable = 1
            SET @isIndexed = 1
            SET @columnName = N'Value';
        END

    ELSE IF (@type = 3) -- Binary
        BEGIN 
            IF (@isIndexable = 1)
                SET @dataType = N'varbinary(800)'
            ELSE
                SET @dataType = N'varbinary(MAX)'

            IF (@isMultiValued = 1)
                IF (@isIndexable = 1)
                    SET @columnName = N'attributeValueBinaryIX';
                ELSE
                    SET @columnName = N'attributeValueBinary';
            ELSE
                SET @columnName = @name;
        END

    ELSE IF (@type = 4) -- Boolean
        BEGIN
            IF (@isIndexed = 1)
                THROW 50000, N'Cannot created an indexed attribute of type boolean', 1;
            ELSE IF (@isIndexable = 1)
                THROW 50001, N'Cannot created an indexable attribute of type boolean', 1;
            ELSE IF (@isMultiValued = 1)
                THROW 50002, N'Cannot created a multivalued attribute of type boolean', 1;
            ELSE
                SET @dataType = 'bit'

            SET @columnName = @name;
        END

    ELSE IF (@type = 99) -- DateTime
        BEGIN
            SET @dataType = 'datetime2(3)';

            IF (@isMultiValued = 1)
                SET @columnName = N'attributeValueDateTime';
            ELSE
                SET @columnName = @name;

            SET @isIndexable = 1;
        END

    ELSE
        THROW 50000, N'Unknown or unsupported data type', 1;
                

    BEGIN TRANSACTION
    
        IF (@tableName = 'MA_Objects')
            BEGIN
                BEGIN TRANSACTION
                    DECLARE @sql nvarchar(4000) = N'ALTER TABLE [dbo].[MA_Objects] ADD ' + @name + N' ' + @dataType + N' NULL';
                    EXEC sp_executesql @sql
                
                    if (@type = 4)
                    BEGIN
                        SET @sql = 'ALTER TABLE [dbo].[MA_Objects] ADD CONSTRAINT DF_MA_Objects_' + @name + ' DEFAULT 0 FOR ' + @name
                        EXEC sp_executesql @sql
                    END

                    ALTER TABLE dbo.MA_Objects SET (LOCK_ESCALATION = TABLE)
                COMMIT

                IF (@isIndexed = 1)
                    EXEC [dbo].[spSchemaCreateIndex] @name
            END

        UPDATE dbo.MA_SchemaAttributes 
            SET 
            [dbo].[MA_SchemaAttributes].[IsIndexable] = @isIndexable, 
            [dbo].[MA_SchemaAttributes].[IsIndexed] = @isIndexed,  
            [dbo].[MA_SchemaAttributes].[TableName] = @tableName, 
            [dbo].[MA_SchemaAttributes].[ColumnName] = @columnName 
        WHERE [dbo].[MA_SchemaAttributes].[ID] = @ID;
        
    COMMIT
END
GO
PRINT N'Creating [dbo].[SchemaMappings].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'SchemaMappings';


GO
PRINT N'Creating [dbo].[SchemaMappings].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N'= 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'SchemaMappings';


GO
PRINT N'Creating [dbo].[SchemaMappings].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "m"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 114
               Right = 274
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "a1"
            Begin Extent = 
               Top = 6
               Left = 312
               Bottom = 114
               Right = 463
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "a2"
            Begin Extent = 
               Top = 6
               Left = 501
               Bottom = 114
               Right = 652
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "a3"
            Begin Extent = 
               Top = 6
               Left = 690
               Bottom = 114
               Right = 841
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "o"
            Begin Extent = 
               Top = 114
               Left = 38
               Bottom = 207
               Right = 248
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'SchemaMappings';


GO
PRINT N'Creating [dbo].[v_SchemaReferenceLinks].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_SchemaReferenceLinks';


GO
PRINT N'Creating [dbo].[v_SchemaReferenceLinks].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N' = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_SchemaReferenceLinks';


GO
PRINT N'Creating [dbo].[v_SchemaReferenceLinks].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "r"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 114
               Right = 219
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "a1"
            Begin Extent = 
               Top = 6
               Left = 257
               Bottom = 114
               Right = 408
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "a2"
            Begin Extent = 
               Top = 6
               Left = 446
               Bottom = 114
               Right = 597
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "o1"
            Begin Extent = 
               Top = 6
               Left = 635
               Bottom = 99
               Right = 845
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "o2"
            Begin Extent = 
               Top = 102
               Left = 635
               Bottom = 195
               Right = 845
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'v_SchemaReferenceLinks';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
			   SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @majorReleaseNumber int;
DECLARE @minorReleaseNumber int;
DECLARE @pointReleaseNumber int;
DECLARE @scriptName nvarchar(20);

SET @majorReleaseNumber=1;
SET @minorReleaseNumber=7;
SET	@pointReleaseNumber=1;
SET @scriptName=N'Setup';

IF NOT EXISTS(
	SELECT 1 FROM [dbo].[DB_Version] WHERE
		MajorReleaseNumber = @majorReleaseNumber AND
		MinorReleaseNumber = @minorReleaseNumber AND
		PointReleaseNumber = @pointReleaseNumber)
		BEGIN
			INSERT INTO [dbo].[DB_Version]
				(MajorReleaseNumber, MinorReleaseNumber, PointReleaseNumber, ScriptName, DateApplied)
				VALUES
				(@majorReleaseNumber, @minorReleaseNumber, @pointReleaseNumber, @scriptName, GETDATE())
		END

INSERT INTO [dbo].[MA_SchemaAttributes] ([Name], [Type], [IsMultivalued], [Operation], [IsIndexable], [IsIndexed], [IsBuiltIn], [TableName], [ColumnName])
VALUES 
('deleted',      1, 0, 3, 0, 1, 1, 'MA_Objects', 'deleted'),
('objectClass',  0, 0, 3, 1, 1, 1, 'MA_Objects', 'objectClass'),
('objectId',     0, 0, 2, 1, 1, 1, 'MA_Objects', 'objectId'),
('shadowParent', 2, 0, 2, 1, 1, 1, 'MA_Objects', 'shadowParent'),
('shadowLink',   0, 0, 2, 0, 0, 1, 'MA_Objects', 'shadowLink')

	
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
